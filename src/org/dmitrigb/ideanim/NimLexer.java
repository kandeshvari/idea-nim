/* The following code was generated by JFlex 1.4.3 on 4/18/16 5:50 PM */

package org.dmitrigb.ideanim;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.intellij.psi.TokenType.*;
import static org.dmitrigb.ideanim.psi.ElementTypes.*;

/**
 * A lexer for lexing Nim source.
 */

public class NimLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ST_BLOCK_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\6\1\0\1\1\1\7\22\0\1\10\1\56\1\50"+
    "\1\5\3\56\1\22\1\63\1\64\1\54\1\33\1\62\1\33\1\34"+
    "\1\56\1\11\1\21\1\27\1\26\1\30\1\17\1\25\1\17\1\24"+
    "\1\14\1\52\1\61\1\56\1\55\3\56\1\13\1\20\1\16\1\36"+
    "\1\32\1\35\2\2\1\23\13\2\1\31\2\2\1\12\2\2\1\53"+
    "\1\47\1\65\1\56\1\3\1\51\1\44\1\73\1\72\1\66\1\42"+
    "\1\43\1\101\1\102\1\71\1\103\1\74\1\45\1\70\1\67\1\15"+
    "\1\75\1\2\1\40\1\46\1\37\1\41\1\76\1\104\1\77\1\100"+
    "\1\2\1\57\1\56\1\60\1\56\53\0\1\2\12\0\1\2\4\0"+
    "\1\2\5\0\27\2\1\0\37\2\1\0\u01ca\2\4\0\14\2\16\0"+
    "\5\2\7\0\1\2\1\0\1\2\201\0\5\2\1\0\2\2\2\0"+
    "\4\2\10\0\1\2\1\0\3\2\1\0\1\2\1\0\24\2\1\0"+
    "\123\2\1\0\213\2\10\0\236\2\11\0\46\2\2\0\1\2\7\0"+
    "\47\2\110\0\33\2\5\0\3\2\55\0\53\2\25\0\12\4\4\0"+
    "\2\2\1\0\143\2\1\0\1\2\17\0\2\2\7\0\2\2\12\4"+
    "\3\2\2\0\1\2\20\0\1\2\1\0\36\2\35\0\131\2\13\0"+
    "\1\2\16\0\12\4\41\2\11\0\2\2\4\0\1\2\5\0\26\2"+
    "\4\0\1\2\11\0\1\2\3\0\1\2\27\0\31\2\107\0\1\2"+
    "\1\0\13\2\127\0\66\2\3\0\1\2\22\0\1\2\7\0\12\2"+
    "\4\0\12\4\1\0\7\2\1\0\7\2\5\0\10\2\2\0\2\2"+
    "\2\0\26\2\1\0\7\2\1\0\1\2\3\0\4\2\3\0\1\2"+
    "\20\0\1\2\15\0\2\2\1\0\3\2\4\0\12\4\2\2\23\0"+
    "\6\2\4\0\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0"+
    "\2\2\1\0\2\2\37\0\4\2\1\0\1\2\7\0\12\4\2\0"+
    "\3\2\20\0\11\2\1\0\3\2\1\0\26\2\1\0\7\2\1\0"+
    "\2\2\1\0\5\2\3\0\1\2\22\0\1\2\17\0\2\2\4\0"+
    "\12\4\25\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0"+
    "\2\2\1\0\5\2\3\0\1\2\36\0\2\2\1\0\3\2\4\0"+
    "\12\4\1\0\1\2\21\0\1\2\1\0\6\2\3\0\3\2\1\0"+
    "\4\2\3\0\2\2\1\0\1\2\1\0\2\2\3\0\2\2\3\0"+
    "\3\2\3\0\14\2\26\0\1\2\25\0\12\4\25\0\10\2\1\0"+
    "\3\2\1\0\27\2\1\0\12\2\1\0\5\2\3\0\1\2\32\0"+
    "\2\2\6\0\2\2\4\0\12\4\25\0\10\2\1\0\3\2\1\0"+
    "\27\2\1\0\12\2\1\0\5\2\3\0\1\2\40\0\1\2\1\0"+
    "\2\2\4\0\12\4\1\0\2\2\22\0\10\2\1\0\3\2\1\0"+
    "\51\2\2\0\1\2\20\0\1\2\21\0\2\2\4\0\12\4\12\0"+
    "\6\2\5\0\22\2\3\0\30\2\1\0\11\2\1\0\1\2\2\0"+
    "\7\2\72\0\60\2\1\0\2\2\14\0\7\2\11\0\12\4\47\0"+
    "\2\2\1\0\1\2\2\0\2\2\1\0\1\2\2\0\1\2\6\0"+
    "\4\2\1\0\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0"+
    "\2\2\1\0\4\2\1\0\2\2\11\0\1\2\2\0\5\2\1\0"+
    "\1\2\11\0\12\4\2\0\4\2\40\0\1\2\37\0\12\4\26\0"+
    "\10\2\1\0\44\2\33\0\5\2\163\0\53\2\24\0\1\2\12\4"+
    "\6\0\6\2\4\0\4\2\3\0\1\2\3\0\2\2\7\0\3\2"+
    "\4\0\15\2\14\0\1\2\1\0\12\4\6\0\46\2\1\0\1\2"+
    "\5\0\1\2\2\0\53\2\1\0\u014d\2\1\0\4\2\2\0\7\2"+
    "\1\0\1\2\1\0\4\2\2\0\51\2\1\0\4\2\2\0\41\2"+
    "\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\17\2"+
    "\1\0\71\2\1\0\4\2\2\0\103\2\45\0\20\2\20\0\125\2"+
    "\14\0\u026c\2\2\0\21\2\1\0\32\2\5\0\113\2\25\0\15\2"+
    "\1\0\4\2\16\0\22\2\16\0\22\2\16\0\15\2\1\0\3\2"+
    "\17\0\64\2\43\0\1\2\4\0\1\2\3\0\12\4\46\0\12\4"+
    "\6\0\130\2\10\0\51\2\1\0\1\2\5\0\106\2\12\0\35\2"+
    "\51\0\12\4\36\2\2\0\5\2\13\0\54\2\25\0\7\2\10\0"+
    "\12\4\46\0\27\2\11\0\65\2\53\0\12\4\6\0\12\4\15\0"+
    "\1\2\135\0\57\2\21\0\7\2\4\0\12\4\51\0\36\2\15\0"+
    "\2\2\12\4\54\2\32\0\44\2\34\0\12\4\3\0\3\2\12\4"+
    "\44\2\153\0\4\2\1\0\4\2\3\0\2\2\11\0\300\2\100\0"+
    "\u0116\2\2\0\6\2\2\0\46\2\2\0\6\2\2\0\10\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\37\2\2\0\65\2\1\0"+
    "\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0\4\2\2\0"+
    "\6\2\4\0\15\2\5\0\3\2\1\0\7\2\26\0\1\2\135\0"+
    "\1\2\15\0\1\2\20\0\15\2\145\0\1\2\4\0\1\2\2\0"+
    "\12\2\1\0\1\2\3\0\5\2\6\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\4\2\1\0\13\2\2\0\4\2\5\0\5\2\4\0"+
    "\1\2\64\0\2\2\u0a7b\0\57\2\1\0\57\2\1\0\205\2\6\0"+
    "\4\2\3\0\2\2\14\0\46\2\1\0\1\2\5\0\1\2\2\0"+
    "\70\2\7\0\1\2\20\0\27\2\11\0\7\2\1\0\7\2\1\0"+
    "\7\2\1\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2\1\0"+
    "\7\2\120\0\1\2\u01d5\0\2\2\52\0\5\2\5\0\2\2\4\0"+
    "\126\2\6\0\3\2\1\0\132\2\1\0\4\2\5\0\51\2\3\0"+
    "\136\2\21\0\33\2\65\0\20\2\u0200\0\u19b6\2\112\0\u51cd\2\63\0"+
    "\u048d\2\103\0\56\2\2\0\u010d\2\3\0\20\2\12\4\2\2\24\0"+
    "\57\2\20\0\31\2\10\0\106\2\61\0\11\2\2\0\147\2\2\0"+
    "\4\2\1\0\4\2\14\0\13\2\115\0\12\2\1\0\3\2\1\0"+
    "\4\2\1\0\27\2\35\0\64\2\16\0\62\2\34\0\12\4\30\0"+
    "\6\2\3\0\1\2\4\0\12\4\34\2\12\0\27\2\31\0\35\2"+
    "\7\0\57\2\34\0\1\2\12\4\46\0\51\2\27\0\3\2\1\0"+
    "\10\2\4\0\12\4\6\0\27\2\3\0\1\2\5\0\60\2\1\0"+
    "\1\2\3\0\2\2\2\0\5\2\2\0\1\2\1\0\1\2\30\0"+
    "\3\2\2\0\13\2\7\0\3\2\14\0\6\2\2\0\6\2\2\0"+
    "\6\2\11\0\7\2\1\0\7\2\221\0\43\2\15\0\12\4\6\0"+
    "\u2ba4\2\14\0\27\2\4\0\61\2\u2104\0\u016e\2\2\0\152\2\46\0"+
    "\7\2\14\0\5\2\5\0\1\2\1\0\12\2\1\0\15\2\1\0"+
    "\5\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0\154\2\41\0"+
    "\u016b\2\22\0\100\2\2\0\66\2\50\0\14\2\164\0\5\2\1\0"+
    "\207\2\23\0\12\4\7\0\32\2\6\0\32\2\13\0\131\2\3\0"+
    "\6\2\2\0\6\2\2\0\6\2\2\0\3\2\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\2\5\1\3\1\6"+
    "\1\7\1\10\10\3\1\11\1\1\1\12\1\13\1\7"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\14\3\3\24\1\0\1\4\2\0\1\25\5\0\1\26"+
    "\2\0\1\27\1\30\1\31\1\3\1\32\1\3\1\6"+
    "\1\0\1\33\1\34\20\3\1\35\5\3\1\11\1\0"+
    "\1\11\1\0\1\36\1\0\1\37\1\40\11\3\1\41"+
    "\1\42\1\43\16\3\1\44\1\45\3\5\1\0\1\46"+
    "\3\0\1\47\2\0\1\50\1\0\1\50\2\0\1\51"+
    "\1\3\1\7\1\3\1\52\4\3\1\53\5\3\1\54"+
    "\2\3\1\55\5\3\1\56\1\3\1\57\1\60\1\3"+
    "\1\61\1\62\1\11\1\0\2\3\1\63\1\64\1\65"+
    "\1\66\15\3\1\67\1\3\1\70\1\71\5\3\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\0\1\27\1\3"+
    "\1\100\2\3\1\101\3\3\1\102\1\103\1\104\2\3"+
    "\1\105\1\106\2\3\1\107\1\3\1\0\20\3\1\110"+
    "\1\111\2\3\1\112\1\113\2\3\1\114\1\115\2\3"+
    "\1\116\2\3\1\117\1\120\5\3\1\0\1\121\2\3"+
    "\1\122\1\3\1\123\1\124\1\3\1\125\4\3\1\126"+
    "\2\3\1\127\1\130\1\131\2\3\1\132\1\133\1\3"+
    "\1\134\1\135\1\136\1\3\1\137\1\140\1\141\2\3"+
    "\1\142\3\3\1\143\6\3\1\144\1\3\1\145\2\3"+
    "\1\146\1\3\1\147\1\3\1\150\1\151\1\152\1\153"+
    "\1\154\1\3\1\155\1\3\1\156\1\157";

  private static int [] zzUnpackAction() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u02b2\0\212"+
    "\0\u05ee\0\u02b2\0\u0633\0\212\0\212\0\212\0\212\0\212"+
    "\0\212\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816"+
    "\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\212\0\u09b4\0\u09f9"+
    "\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0a83\0\u0b52\0\u0b97\0\u0bdc"+
    "\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\212\0\u0114"+
    "\0\u0dbf\0\u0114\0\u0e04\0\212\0\u0e49\0\u0e8e\0\212\0\u0ed3"+
    "\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb"+
    "\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323"+
    "\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b"+
    "\0\u05a9\0\212\0\u0e8e\0\212\0\u0114\0\u1590\0\u15d5\0\u161a"+
    "\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u0114\0\u17fd"+
    "\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25"+
    "\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\212"+
    "\0\212\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\212\0\u1d61\0\u1da6"+
    "\0\u1deb\0\212\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89"+
    "\0\u1fce\0\u0114\0\u2013\0\u0e8e\0\u2058\0\u0114\0\u209d\0\u20e2"+
    "\0\u2127\0\u216c\0\u0114\0\u21b1\0\u21f6\0\u223b\0\u2280\0\u22c5"+
    "\0\u0114\0\u230a\0\u234f\0\u0114\0\u2394\0\u23d9\0\u241e\0\u2463"+
    "\0\u24a8\0\u0114\0\u24ed\0\u0114\0\u0114\0\u2532\0\u0114\0\u0114"+
    "\0\212\0\u2577\0\u25bc\0\u2601\0\u0114\0\u2646\0\u0114\0\u0114"+
    "\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829\0\u286e"+
    "\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u0114\0\u2a0c\0\u0114"+
    "\0\u0114\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\212\0\212"+
    "\0\212\0\212\0\212\0\212\0\u2baa\0\212\0\u2bef\0\u0114"+
    "\0\u2c34\0\u2c79\0\u0114\0\u2cbe\0\u2d03\0\u2d48\0\u0114\0\u0114"+
    "\0\u0114\0\u2d8d\0\u2dd2\0\u0114\0\u0114\0\u2e17\0\u2e5c\0\u0114"+
    "\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\u3084"+
    "\0\u30c9\0\u310e\0\u3153\0\u3198\0\u31dd\0\u3222\0\u3267\0\u32ac"+
    "\0\u32f1\0\u3336\0\u0114\0\u0114\0\u337b\0\u33c0\0\u0114\0\u0114"+
    "\0\u3405\0\u344a\0\u348f\0\u0114\0\u34d4\0\u3519\0\u0114\0\u355e"+
    "\0\u35a3\0\u0114\0\u0114\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc"+
    "\0\u3741\0\u0114\0\u3786\0\u37cb\0\u0114\0\u3810\0\u0114\0\u0114"+
    "\0\u3855\0\u0114\0\u389a\0\u38df\0\u3924\0\u3969\0\u0114\0\u39ae"+
    "\0\u39f3\0\u0114\0\u0114\0\u0114\0\u3a38\0\u3a7d\0\u0114\0\u0114"+
    "\0\u3ac2\0\u0114\0\u0114\0\u0114\0\u3b07\0\u0114\0\u0114\0\u3b4c"+
    "\0\u3b91\0\u3bd6\0\u0114\0\u3c1b\0\u3c60\0\u3ca5\0\u0114\0\u3cea"+
    "\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe\0\u3e43\0\u0114\0\u3e88\0\u0114"+
    "\0\u3ecd\0\u3f12\0\u0114\0\u3f57\0\u0114\0\u3f9c\0\u0114\0\u0114"+
    "\0\u0114\0\u0114\0\u0114\0\u3fe1\0\u0114\0\u4026\0\u0114\0\u0114";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\2\3\1\6\3\4\1\7\2\5"+
    "\1\10\1\11\1\5\1\10\1\5\1\10\1\12\1\5"+
    "\5\10\2\5\1\13\1\14\2\5\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\13\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\13\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\5\1\50\1\51\1\52\1\53\1\54"+
    "\2\5\1\55\5\56\1\57\57\56\1\60\17\56\106\0"+
    "\1\4\4\0\3\4\76\0\1\5\1\61\1\5\4\0"+
    "\11\5\1\0\10\5\2\0\12\5\17\0\17\5\6\62"+
    "\1\63\1\64\43\62\1\65\31\62\3\0\1\10\5\0"+
    "\1\10\1\66\1\0\1\10\2\67\1\10\1\70\1\10"+
    "\1\71\1\72\5\10\1\73\1\74\1\0\1\75\1\76"+
    "\1\77\2\0\1\73\1\74\1\76\22\0\1\77\2\0"+
    "\1\72\1\67\1\70\3\0\1\66\10\0\1\10\5\0"+
    "\1\10\2\0\1\10\2\0\1\10\1\0\1\10\1\71"+
    "\1\72\5\10\1\73\1\74\1\0\1\75\1\76\1\77"+
    "\2\0\1\73\1\74\1\76\22\0\1\77\2\0\1\72"+
    "\15\0\1\5\1\61\1\5\4\0\11\5\1\0\10\5"+
    "\2\0\3\5\1\100\1\101\1\5\1\102\3\5\17\0"+
    "\5\5\1\103\11\5\6\12\2\0\12\12\1\104\24\12"+
    "\1\105\35\12\33\0\2\106\12\0\1\106\2\0\1\106"+
    "\1\0\3\106\61\0\2\106\12\0\1\106\2\0\1\106"+
    "\1\0\3\106\1\0\1\107\26\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\3\5\1\110\1\111"+
    "\1\112\4\5\17\0\12\5\1\113\4\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\5\5"+
    "\1\114\1\5\1\115\2\5\17\0\17\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\11\5"+
    "\1\116\17\0\17\5\2\0\1\5\1\61\1\5\4\0"+
    "\11\5\1\0\10\5\2\0\10\5\1\117\1\5\17\0"+
    "\1\5\1\120\7\5\1\121\5\5\2\0\1\5\1\61"+
    "\1\5\4\0\4\5\1\122\4\5\1\0\10\5\2\0"+
    "\3\5\1\123\1\124\2\5\1\125\2\5\17\0\3\5"+
    "\1\126\13\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\2\5\1\127\6\5\1\130\17\0"+
    "\1\131\1\132\15\5\2\0\1\5\1\61\1\5\4\0"+
    "\11\5\1\0\10\5\2\0\5\5\1\133\4\5\17\0"+
    "\17\5\2\0\1\5\1\61\1\5\4\0\11\5\1\0"+
    "\10\5\2\0\2\5\1\134\7\5\17\0\14\5\1\135"+
    "\2\5\6\136\2\0\37\136\1\137\1\140\34\136\6\141"+
    "\2\0\41\141\1\142\33\141\33\0\2\106\12\0\1\106"+
    "\2\0\1\143\1\0\3\106\62\0\1\144\52\0\1\5"+
    "\1\61\1\5\4\0\4\5\1\145\4\5\1\0\10\5"+
    "\2\0\5\5\1\146\4\5\17\0\3\5\1\147\13\5"+
    "\2\0\1\5\1\61\1\5\4\0\4\5\1\150\4\5"+
    "\1\0\10\5\2\0\12\5\17\0\3\5\1\151\13\5"+
    "\2\0\1\5\1\61\1\5\4\0\4\5\1\152\4\5"+
    "\1\0\10\5\2\0\5\5\1\153\1\5\1\154\2\5"+
    "\17\0\3\5\1\155\13\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\2\5\1\156\3\5"+
    "\1\157\2\5\1\160\17\0\1\5\1\161\1\162\14\5"+
    "\2\0\1\5\1\61\1\5\4\0\4\5\1\163\4\5"+
    "\1\0\10\5\2\0\7\5\1\164\2\5\17\0\17\5"+
    "\2\0\1\5\1\61\1\5\4\0\11\5\1\0\10\5"+
    "\2\0\3\5\1\165\4\5\1\166\1\5\17\0\3\5"+
    "\1\167\13\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\2\5\1\170\1\171\6\5\17\0"+
    "\17\5\2\0\1\5\1\61\1\5\4\0\11\5\1\0"+
    "\10\5\2\0\7\5\1\172\2\5\17\0\17\5\2\0"+
    "\1\5\1\61\1\5\4\0\4\5\1\173\4\5\1\0"+
    "\10\5\2\0\12\5\17\0\17\5\2\0\1\5\1\61"+
    "\1\5\4\0\11\5\1\0\10\5\2\0\12\5\17\0"+
    "\3\5\1\174\13\5\2\0\1\5\1\61\1\5\4\0"+
    "\11\5\1\0\10\5\2\0\5\5\1\175\4\5\17\0"+
    "\17\5\2\0\1\5\1\61\1\5\4\0\11\5\1\0"+
    "\10\5\2\0\12\5\17\0\3\5\1\176\10\5\1\177"+
    "\2\5\53\0\1\200\36\0\1\201\101\0\1\5\1\0"+
    "\1\5\4\0\11\5\1\0\10\5\2\0\12\5\17\0"+
    "\17\5\6\62\1\63\1\64\75\62\5\0\1\62\2\0"+
    "\1\63\102\0\1\63\107\0\1\202\1\0\2\202\1\0"+
    "\4\202\2\0\5\202\1\0\1\202\2\0\2\202\3\0"+
    "\3\202\21\0\1\202\3\0\2\202\22\0\1\203\5\0"+
    "\1\203\1\0\1\203\3\0\4\203\65\0\1\204\7\0"+
    "\1\204\106\0\1\72\5\0\1\73\3\0\1\76\1\77"+
    "\2\0\1\73\1\0\1\76\22\0\1\77\2\0\1\72"+
    "\34\0\1\205\2\0\1\206\1\207\1\210\77\0\1\211"+
    "\2\0\1\212\1\213\1\214\67\0\1\215\2\0\1\215"+
    "\2\0\1\215\1\0\1\215\2\0\5\215\2\0\1\216"+
    "\54\0\1\217\5\0\1\217\2\0\1\217\2\0\1\217"+
    "\1\0\1\217\2\0\5\217\101\0\1\220\1\221\60\0"+
    "\1\5\1\61\1\5\4\0\11\5\1\0\10\5\2\0"+
    "\2\5\1\222\7\5\17\0\17\5\2\0\1\5\1\61"+
    "\1\5\4\0\11\5\1\0\10\5\2\0\12\5\17\0"+
    "\15\5\1\223\1\5\6\12\1\0\76\12\33\0\2\224"+
    "\12\0\1\224\2\0\1\224\1\0\3\224\30\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\4\5"+
    "\1\225\5\5\17\0\12\5\1\226\4\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\12\5"+
    "\17\0\7\5\1\227\7\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\12\5\17\0\2\5"+
    "\1\230\14\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\12\5\17\0\7\5\1\231\7\5"+
    "\2\0\1\5\1\61\1\5\4\0\11\5\1\0\10\5"+
    "\2\0\2\5\1\232\3\5\1\233\3\5\17\0\17\5"+
    "\2\0\1\5\1\61\1\5\4\0\11\5\1\0\10\5"+
    "\2\0\12\5\17\0\3\5\1\234\13\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\12\5"+
    "\17\0\3\5\1\235\13\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\11\5\1\236\17\0"+
    "\3\5\1\237\13\5\2\0\1\5\1\61\1\5\4\0"+
    "\11\5\1\0\10\5\2\0\4\5\1\240\5\5\17\0"+
    "\1\241\16\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\12\5\17\0\4\5\1\242\2\5"+
    "\1\243\7\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\3\5\1\244\6\5\17\0\17\5"+
    "\2\0\1\5\1\61\1\5\4\0\4\5\1\245\4\5"+
    "\1\0\10\5\2\0\12\5\17\0\17\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\12\5"+
    "\17\0\1\5\1\246\15\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\10\5\1\247\1\5"+
    "\17\0\17\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\12\5\17\0\1\5\1\250\15\5"+
    "\2\0\1\5\1\61\1\5\4\0\4\5\1\251\4\5"+
    "\1\0\10\5\2\0\12\5\17\0\17\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\12\5"+
    "\17\0\2\5\1\252\14\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\12\5\17\0\1\253"+
    "\16\5\2\0\1\5\1\61\1\5\4\0\11\5\1\0"+
    "\10\5\2\0\12\5\17\0\1\254\16\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\2\5"+
    "\1\255\7\5\17\0\17\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\7\5\1\256\2\5"+
    "\17\0\17\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\3\5\1\257\4\5\1\260\1\5"+
    "\17\0\17\5\6\136\2\0\37\136\1\137\1\261\42\136"+
    "\1\0\76\136\50\0\1\262\36\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\6\5\1\263\3\5"+
    "\17\0\17\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\11\5\1\264\17\0\10\5\1\265"+
    "\6\5\2\0\1\5\1\61\1\5\4\0\11\5\1\0"+
    "\10\5\2\0\2\5\1\266\7\5\17\0\17\5\2\0"+
    "\1\5\1\61\1\5\4\0\11\5\1\0\10\5\2\0"+
    "\10\5\1\267\1\5\17\0\17\5\2\0\1\5\1\61"+
    "\1\5\4\0\11\5\1\0\10\5\2\0\12\5\17\0"+
    "\1\270\16\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\2\5\1\271\7\5\17\0\17\5"+
    "\2\0\1\5\1\61\1\5\4\0\11\5\1\0\10\5"+
    "\2\0\12\5\17\0\4\5\1\272\12\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\12\5"+
    "\17\0\11\5\1\273\5\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\5\5\1\274\4\5"+
    "\17\0\17\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\12\5\17\0\1\5\1\275\15\5"+
    "\2\0\1\5\1\61\1\5\4\0\11\5\1\0\10\5"+
    "\2\0\2\5\1\276\7\5\17\0\4\5\1\277\12\5"+
    "\2\0\1\5\1\61\1\5\4\0\11\5\1\0\10\5"+
    "\2\0\12\5\17\0\7\5\1\300\7\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\12\5"+
    "\17\0\1\5\1\301\15\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\11\5\1\302\17\0"+
    "\17\5\2\0\1\5\1\61\1\5\4\0\11\5\1\0"+
    "\10\5\2\0\5\5\1\303\4\5\17\0\17\5\2\0"+
    "\1\5\1\61\1\5\4\0\4\5\1\304\4\5\1\0"+
    "\10\5\2\0\12\5\17\0\17\5\2\0\1\5\1\61"+
    "\1\5\4\0\11\5\1\0\10\5\2\0\12\5\17\0"+
    "\1\5\1\305\15\5\2\0\1\5\1\61\1\5\4\0"+
    "\11\5\1\0\10\5\2\0\3\5\1\306\6\5\17\0"+
    "\17\5\2\0\1\5\1\61\1\5\4\0\4\5\1\307"+
    "\4\5\1\0\10\5\2\0\12\5\17\0\17\5\2\0"+
    "\1\5\1\61\1\5\4\0\11\5\1\0\10\5\2\0"+
    "\3\5\1\310\6\5\17\0\17\5\2\0\1\5\1\61"+
    "\1\5\4\0\11\5\1\0\10\5\2\0\3\5\1\311"+
    "\6\5\17\0\17\5\2\0\1\5\1\61\1\5\4\0"+
    "\11\5\1\0\10\5\2\0\5\5\1\312\4\5\17\0"+
    "\17\5\2\0\1\5\1\61\1\5\4\0\11\5\1\0"+
    "\10\5\2\0\12\5\17\0\1\5\1\313\15\5\2\0"+
    "\1\5\1\61\1\5\4\0\11\5\1\0\10\5\2\0"+
    "\2\5\1\314\7\5\17\0\17\5\2\0\1\5\1\61"+
    "\1\5\4\0\11\5\1\0\10\5\2\0\5\5\1\315"+
    "\4\5\17\0\3\5\1\316\13\5\3\0\1\202\5\0"+
    "\1\202\1\0\2\202\1\0\4\202\1\71\1\72\5\202"+
    "\1\73\1\202\2\0\2\202\2\0\1\73\3\202\21\0"+
    "\1\202\2\0\1\72\2\202\14\0\1\203\5\0\1\203"+
    "\5\0\1\203\1\0\1\203\1\71\1\72\1\0\4\203"+
    "\1\73\3\0\1\76\1\77\2\0\1\73\1\0\1\76"+
    "\22\0\1\77\2\0\1\72\16\0\1\204\5\0\1\204"+
    "\7\0\1\204\1\71\1\72\5\0\1\73\3\0\1\76"+
    "\1\77\2\0\1\73\1\0\1\76\22\0\1\77\2\0"+
    "\1\72\40\0\1\317\107\0\1\320\103\0\1\321\102\0"+
    "\1\322\107\0\1\323\103\0\1\324\60\0\1\215\5\0"+
    "\1\215\2\0\1\215\2\0\1\215\1\0\1\215\1\325"+
    "\1\0\5\215\4\0\1\76\1\77\4\0\1\76\22\0"+
    "\1\77\27\0\1\215\2\0\1\215\2\0\1\215\1\0"+
    "\1\215\2\0\5\215\57\0\1\217\5\0\1\217\2\0"+
    "\1\217\2\0\1\217\1\0\1\217\1\325\1\0\5\217"+
    "\1\0\1\74\2\0\1\76\1\77\3\0\1\74\1\76"+
    "\22\0\1\77\46\0\1\77\103\0\1\326\57\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\5\5"+
    "\1\327\4\5\17\0\17\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\5\5\1\330\4\5"+
    "\17\0\17\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\10\5\1\331\1\5\17\0\17\5"+
    "\2\0\1\5\1\61\1\5\4\0\11\5\1\0\10\5"+
    "\2\0\12\5\17\0\7\5\1\332\7\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\5\5"+
    "\1\333\4\5\17\0\17\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\4\5\1\334\5\5"+
    "\17\0\17\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\11\5\1\335\17\0\17\5\2\0"+
    "\1\5\1\61\1\5\4\0\11\5\1\0\10\5\2\0"+
    "\12\5\17\0\1\5\1\336\15\5\2\0\1\5\1\61"+
    "\1\5\4\0\11\5\1\0\10\5\2\0\5\5\1\337"+
    "\4\5\17\0\17\5\2\0\1\5\1\61\1\5\4\0"+
    "\11\5\1\0\10\5\2\0\6\5\1\340\3\5\17\0"+
    "\17\5\2\0\1\5\1\61\1\5\4\0\11\5\1\0"+
    "\10\5\2\0\12\5\17\0\2\5\1\341\14\5\2\0"+
    "\1\5\1\61\1\5\4\0\11\5\1\0\10\5\2\0"+
    "\5\5\1\342\4\5\17\0\17\5\2\0\1\5\1\61"+
    "\1\5\4\0\4\5\1\343\4\5\1\0\10\5\2\0"+
    "\12\5\17\0\17\5\2\0\1\5\1\61\1\5\4\0"+
    "\11\5\1\0\10\5\2\0\12\5\17\0\2\5\1\344"+
    "\14\5\2\0\1\5\1\61\1\5\4\0\11\5\1\0"+
    "\10\5\2\0\12\5\17\0\4\5\1\345\12\5\2\0"+
    "\1\5\1\61\1\5\4\0\11\5\1\0\10\5\2\0"+
    "\11\5\1\225\17\0\17\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\7\5\1\346\2\5"+
    "\17\0\17\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\12\5\17\0\2\5\1\347\14\5"+
    "\2\0\1\5\1\61\1\5\4\0\11\5\1\0\10\5"+
    "\2\0\3\5\1\350\6\5\17\0\17\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\2\5"+
    "\1\351\7\5\17\0\17\5\50\262\1\352\34\262\2\0"+
    "\1\5\1\61\1\5\4\0\11\5\1\0\10\5\2\0"+
    "\5\5\1\353\4\5\17\0\17\5\2\0\1\5\1\61"+
    "\1\5\4\0\11\5\1\0\10\5\2\0\2\5\1\354"+
    "\7\5\17\0\4\5\1\355\12\5\2\0\1\5\1\61"+
    "\1\5\4\0\11\5\1\0\10\5\2\0\12\5\17\0"+
    "\3\5\1\356\13\5\2\0\1\5\1\61\1\5\4\0"+
    "\11\5\1\0\10\5\2\0\12\5\17\0\14\5\1\357"+
    "\2\5\2\0\1\5\1\61\1\5\4\0\11\5\1\0"+
    "\10\5\2\0\3\5\1\360\6\5\17\0\17\5\2\0"+
    "\1\5\1\61\1\5\4\0\11\5\1\0\10\5\2\0"+
    "\12\5\17\0\3\5\1\361\13\5\2\0\1\5\1\61"+
    "\1\5\4\0\11\5\1\0\10\5\2\0\3\5\1\362"+
    "\6\5\17\0\17\5\2\0\1\5\1\61\1\5\4\0"+
    "\4\5\1\363\4\5\1\0\10\5\2\0\12\5\17\0"+
    "\17\5\2\0\1\5\1\61\1\5\4\0\11\5\1\0"+
    "\10\5\2\0\5\5\1\364\4\5\17\0\17\5\2\0"+
    "\1\5\1\61\1\5\4\0\11\5\1\0\10\5\2\0"+
    "\10\5\1\365\1\5\17\0\17\5\2\0\1\5\1\61"+
    "\1\5\4\0\4\5\1\366\4\5\1\0\10\5\2\0"+
    "\12\5\17\0\17\5\2\0\1\5\1\61\1\5\4\0"+
    "\11\5\1\0\10\5\2\0\2\5\1\367\6\5\1\370"+
    "\17\0\4\5\1\371\3\5\1\372\6\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\2\5"+
    "\1\373\2\5\1\374\4\5\17\0\17\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\7\5"+
    "\1\375\2\5\17\0\17\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\12\5\17\0\4\5"+
    "\1\376\12\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\12\5\17\0\1\377\16\5\2\0"+
    "\1\5\1\61\1\5\4\0\11\5\1\0\10\5\2\0"+
    "\12\5\17\0\4\5\1\u0100\12\5\2\0\1\5\1\61"+
    "\1\5\4\0\11\5\1\0\10\5\2\0\10\5\1\u0101"+
    "\1\5\17\0\17\5\2\0\1\5\1\61\1\5\4\0"+
    "\11\5\1\0\10\5\2\0\5\5\1\u0102\4\5\17\0"+
    "\17\5\2\0\1\5\1\61\1\5\4\0\11\5\1\0"+
    "\10\5\2\0\12\5\17\0\14\5\1\u0103\2\5\2\0"+
    "\1\5\1\61\1\5\4\0\11\5\1\0\10\5\2\0"+
    "\12\5\17\0\1\5\1\u0104\15\5\2\0\1\5\1\61"+
    "\1\5\4\0\11\5\1\0\10\5\2\0\10\5\1\u0105"+
    "\1\5\17\0\17\5\35\0\1\76\1\77\4\0\1\76"+
    "\22\0\1\77\20\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\12\5\17\0\4\5\1\u0106\12\5"+
    "\2\0\1\5\1\61\1\5\4\0\11\5\1\0\10\5"+
    "\2\0\5\5\1\u0107\4\5\17\0\17\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\10\5"+
    "\1\u0108\1\5\17\0\17\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\3\5\1\u0109\6\5"+
    "\17\0\17\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\5\5\1\u010a\4\5\17\0\17\5"+
    "\2\0\1\5\1\61\1\5\4\0\11\5\1\0\10\5"+
    "\2\0\12\5\17\0\13\5\1\u010b\3\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\12\5"+
    "\17\0\7\5\1\u010c\7\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\3\5\1\u010d\6\5"+
    "\17\0\17\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\10\5\1\u010e\1\5\17\0\17\5"+
    "\2\0\1\5\1\61\1\5\4\0\11\5\1\0\10\5"+
    "\2\0\12\5\17\0\3\5\1\u010f\13\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\12\5"+
    "\17\0\3\5\1\u0110\13\5\50\262\1\u0111\34\262\2\0"+
    "\1\5\1\61\1\5\4\0\11\5\1\0\10\5\2\0"+
    "\3\5\1\u0112\6\5\17\0\17\5\2\0\1\5\1\61"+
    "\1\5\4\0\11\5\1\0\10\5\2\0\12\5\17\0"+
    "\3\5\1\u0113\13\5\2\0\1\5\1\61\1\5\4\0"+
    "\11\5\1\0\10\5\2\0\7\5\1\u0114\2\5\17\0"+
    "\17\5\2\0\1\5\1\61\1\5\4\0\11\5\1\0"+
    "\10\5\2\0\12\5\17\0\1\5\1\u0115\15\5\2\0"+
    "\1\5\1\61\1\5\4\0\4\5\1\u0116\4\5\1\0"+
    "\10\5\2\0\12\5\17\0\17\5\2\0\1\5\1\61"+
    "\1\5\4\0\4\5\1\u0117\4\5\1\0\10\5\2\0"+
    "\12\5\17\0\17\5\2\0\1\5\1\61\1\5\4\0"+
    "\11\5\1\0\10\5\2\0\12\5\17\0\1\5\1\u0118"+
    "\15\5\2\0\1\5\1\61\1\5\4\0\11\5\1\0"+
    "\10\5\2\0\7\5\1\u0119\2\5\17\0\17\5\2\0"+
    "\1\5\1\61\1\5\4\0\11\5\1\0\10\5\2\0"+
    "\2\5\1\u011a\7\5\17\0\17\5\2\0\1\5\1\61"+
    "\1\5\4\0\11\5\1\0\10\5\2\0\3\5\1\u011b"+
    "\6\5\17\0\17\5\2\0\1\5\1\61\1\5\4\0"+
    "\11\5\1\0\10\5\2\0\4\5\1\u011c\5\5\17\0"+
    "\17\5\2\0\1\5\1\61\1\5\4\0\11\5\1\0"+
    "\10\5\2\0\3\5\1\u011d\6\5\17\0\17\5\2\0"+
    "\1\5\1\61\1\5\4\0\11\5\1\0\10\5\2\0"+
    "\12\5\17\0\3\5\1\u011e\13\5\2\0\1\5\1\61"+
    "\1\5\4\0\11\5\1\0\10\5\2\0\2\5\1\u011f"+
    "\7\5\17\0\17\5\2\0\1\5\1\61\1\5\4\0"+
    "\11\5\1\0\10\5\2\0\5\5\1\u0120\4\5\17\0"+
    "\17\5\2\0\1\5\1\61\1\5\4\0\11\5\1\0"+
    "\10\5\2\0\5\5\1\u0121\4\5\17\0\17\5\2\0"+
    "\1\5\1\61\1\5\4\0\11\5\1\0\10\5\2\0"+
    "\12\5\17\0\6\5\1\u0122\10\5\2\0\1\5\1\61"+
    "\1\5\4\0\11\5\1\0\10\5\2\0\12\5\17\0"+
    "\6\5\1\u0123\10\5\2\0\1\5\1\61\1\5\4\0"+
    "\11\5\1\0\10\5\2\0\12\5\17\0\1\u0124\16\5"+
    "\2\0\1\5\1\61\1\5\4\0\11\5\1\0\10\5"+
    "\2\0\3\5\1\u0125\6\5\17\0\17\5\2\0\1\5"+
    "\1\61\1\5\4\0\4\5\1\u0126\4\5\1\0\10\5"+
    "\2\0\12\5\17\0\17\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\5\5\1\u0127\4\5"+
    "\17\0\17\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\2\5\1\u0128\7\5\17\0\17\5"+
    "\2\0\1\5\1\61\1\5\4\0\11\5\1\0\10\5"+
    "\2\0\7\5\1\u0129\2\5\17\0\17\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\12\5"+
    "\17\0\1\5\1\u012a\15\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\2\5\1\u012b\7\5"+
    "\17\0\17\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\2\5\1\u012c\7\5\17\0\17\5"+
    "\2\0\1\5\1\61\1\5\4\0\11\5\1\0\10\5"+
    "\2\0\10\5\1\u012d\1\5\17\0\17\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\12\5"+
    "\17\0\4\5\1\u012e\12\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\12\5\17\0\4\5"+
    "\1\u012f\12\5\50\262\1\u0130\34\262\2\0\1\5\1\61"+
    "\1\5\4\0\11\5\1\0\10\5\2\0\12\5\17\0"+
    "\1\5\1\u0131\15\5\2\0\1\5\1\61\1\5\4\0"+
    "\11\5\1\0\10\5\2\0\3\5\1\u0132\6\5\17\0"+
    "\17\5\2\0\1\5\1\61\1\5\4\0\11\5\1\0"+
    "\10\5\2\0\12\5\17\0\1\u0133\16\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\2\5"+
    "\1\u0134\7\5\17\0\17\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\6\5\1\u0135\3\5"+
    "\17\0\17\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\12\5\17\0\1\u0136\16\5\2\0"+
    "\1\5\1\61\1\5\4\0\11\5\1\0\10\5\2\0"+
    "\2\5\1\u0137\7\5\17\0\17\5\2\0\1\5\1\61"+
    "\1\5\4\0\11\5\1\0\10\5\2\0\12\5\17\0"+
    "\1\5\1\u0138\15\5\2\0\1\5\1\61\1\5\4\0"+
    "\11\5\1\0\10\5\2\0\12\5\17\0\7\5\1\u0139"+
    "\7\5\2\0\1\5\1\61\1\5\4\0\11\5\1\0"+
    "\10\5\2\0\3\5\1\u013a\6\5\17\0\17\5\2\0"+
    "\1\5\1\61\1\5\4\0\11\5\1\0\10\5\2\0"+
    "\12\5\17\0\3\5\1\u013b\13\5\2\0\1\5\1\61"+
    "\1\5\4\0\11\5\1\0\10\5\2\0\4\5\1\u013c"+
    "\5\5\17\0\17\5\2\0\1\5\1\61\1\5\4\0"+
    "\11\5\1\0\10\5\2\0\2\5\1\u013d\7\5\17\0"+
    "\17\5\2\0\1\5\1\61\1\5\4\0\11\5\1\0"+
    "\10\5\2\0\12\5\17\0\12\5\1\u013e\4\5\50\0"+
    "\1\u0130\36\0\1\5\1\61\1\5\4\0\11\5\1\0"+
    "\10\5\2\0\12\5\17\0\4\5\1\u013f\12\5\2\0"+
    "\1\5\1\61\1\5\4\0\11\5\1\0\10\5\2\0"+
    "\12\5\17\0\1\u0140\16\5\2\0\1\5\1\61\1\5"+
    "\4\0\4\5\1\u0141\4\5\1\0\10\5\2\0\12\5"+
    "\17\0\17\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\7\5\1\u0142\2\5\17\0\17\5"+
    "\2\0\1\5\1\61\1\5\4\0\11\5\1\0\10\5"+
    "\2\0\5\5\1\u0143\4\5\17\0\17\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\4\5"+
    "\1\u0144\5\5\17\0\17\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\2\5\1\u0145\7\5"+
    "\17\0\17\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\2\5\1\u0146\7\5\17\0\17\5"+
    "\2\0\1\5\1\61\1\5\4\0\11\5\1\0\10\5"+
    "\2\0\12\5\17\0\4\5\1\u0147\12\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\2\5"+
    "\1\u0148\7\5\17\0\17\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\5\5\1\u0149\4\5"+
    "\17\0\17\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\2\5\1\u014a\7\5\17\0\17\5"+
    "\2\0\1\5\1\61\1\5\4\0\11\5\1\0\10\5"+
    "\2\0\3\5\1\u014b\6\5\17\0\17\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\12\5"+
    "\17\0\4\5\1\u014c\12\5\2\0\1\5\1\61\1\5"+
    "\4\0\11\5\1\0\10\5\2\0\5\5\1\u014d\4\5"+
    "\17\0\17\5\2\0\1\5\1\61\1\5\4\0\11\5"+
    "\1\0\10\5\2\0\5\5\1\u014e\4\5\17\0\17\5"+
    "\2\0\1\5\1\61\1\5\4\0\11\5\1\0\10\5"+
    "\2\0\5\5\1\u014f\4\5\17\0\17\5\2\0\1\5"+
    "\1\61\1\5\4\0\11\5\1\0\10\5\2\0\3\5"+
    "\1\u0150\6\5\17\0\17\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16491];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\24\1\1\11\3\1\6\11\14\1\1\11"+
    "\2\1\1\0\1\1\2\0\1\1\5\0\1\1\2\0"+
    "\1\1\1\11\4\1\1\11\1\0\1\1\1\11\27\1"+
    "\1\0\1\1\1\0\1\11\1\0\1\11\33\1\2\11"+
    "\3\1\1\0\1\11\3\0\1\11\2\0\1\1\1\0"+
    "\1\1\2\0\37\1\1\11\1\0\34\1\6\11\1\0"+
    "\1\11\23\1\1\0\46\1\1\0\77\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  int blockCommentNestingLevel = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public NimLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1756) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 95: 
          { return T_ATOMIC;
          }
        case 112: break;
        case 80: 
          { return T_USING;
          }
        case 113: break;
        case 76: 
          { return T_WITH;
          }
        case 114: break;
        case 103: 
          { return T_CONCEPT;
          }
        case 115: break;
        case 3: 
          { return IDENT;
          }
        case 116: break;
        case 20: 
          { return BLOCK_COMMENT;
          }
        case 117: break;
        case 106: 
          { return T_TEMPLATE;
          }
        case 118: break;
        case 78: 
          { return T_TUPLE;
          }
        case 119: break;
        case 16: 
          { return T_COMMA;
          }
        case 120: break;
        case 109: 
          { return T_CONTINUE;
          }
        case 121: break;
        case 84: 
          { return T_MIXIN;
          }
        case 122: break;
        case 98: 
          { return T_METHOD;
          }
        case 123: break;
        case 55: 
          { return T_PTR;
          }
        case 124: break;
        case 73: 
          { return T_CASE;
          }
        case 125: break;
        case 79: 
          { return T_RAISE;
          }
        case 126: break;
        case 85: 
          { return T_ISNOT;
          }
        case 127: break;
        case 42: 
          { return T_TRY;
          }
        case 128: break;
        case 48: 
          { return T_LET;
          }
        case 129: break;
        case 14: 
          { return T_RBRACE;
          }
        case 130: break;
        case 13: 
          { return T_LBRACE;
          }
        case 131: break;
        case 47: 
          { return T_AND;
          }
        case 132: break;
        case 67: 
          { return T_ELIF;
          }
        case 133: break;
        case 97: 
          { return TRIPLESTR_LITERAL;
          }
        case 134: break;
        case 60: 
          { return INT32_LITERAL;
          }
        case 135: break;
        case 40: 
          { return FLOAT_LITERAL;
          }
        case 136: break;
        case 111: 
          { return T_CONVERTER;
          }
        case 137: break;
        case 88: 
          { return T_BLOCK;
          }
        case 138: break;
        case 99: 
          { return T_IMPORT;
          }
        case 139: break;
        case 28: 
          { return T_DOTBRACE;
          }
        case 140: break;
        case 22: 
          { return UINT_LITERAL;
          }
        case 141: break;
        case 44: 
          { return T_END;
          }
        case 142: break;
        case 108: 
          { return T_ITERATOR;
          }
        case 143: break;
        case 15: 
          { return T_SEMICOLON;
          }
        case 144: break;
        case 32: 
          { return T_DO;
          }
        case 145: break;
        case 35: 
          { return T_IN;
          }
        case 146: break;
        case 53: 
          { return T_NIL;
          }
        case 147: break;
        case 100: 
          { return T_FINALLY;
          }
        case 148: break;
        case 81: 
          { return T_DEFER;
          }
        case 149: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 150: break;
        case 54: 
          { return T_MOD;
          }
        case 151: break;
        case 27: 
          { if (yytext().equals("::"))
      return T_DBLCOLON;
    if (yytext().equals(".."))
      return T_DOTDOT;
    return OPERATOR;
          }
        case 152: break;
        case 26: 
          { return T_OF;
          }
        case 153: break;
        case 57: 
          { return T_XOR;
          }
        case 154: break;
        case 9: 
          { return STRING_LITERAL;
          }
        case 155: break;
        case 18: 
          { return T_RPAREN;
          }
        case 156: break;
        case 59: 
          { return INT64_LITERAL;
          }
        case 157: break;
        case 23: 
          { return FLOAT32_LITERAL;
          }
        case 158: break;
        case 51: 
          { return T_DIV;
          }
        case 159: break;
        case 17: 
          { return T_LPAREN;
          }
        case 160: break;
        case 77: 
          { return T_WHEN;
          }
        case 161: break;
        case 37: 
          { if (--blockCommentNestingLevel == 0) yybegin(YYINITIAL);
      return BLOCK_COMMENT;
          }
        case 162: break;
        case 19: 
          { return T_RBRACKET;
          }
        case 163: break;
        case 105: 
          { return T_WITHOUT;
          }
        case 164: break;
        case 25: 
          { return T_OR;
          }
        case 165: break;
        case 50: 
          { return T_SHL;
          }
        case 166: break;
        case 70: 
          { return T_FUNC;
          }
        case 167: break;
        case 34: 
          { return T_IS;
          }
        case 168: break;
        case 75: 
          { return T_PROC;
          }
        case 169: break;
        case 46: 
          { return T_ASM;
          }
        case 170: break;
        case 58: 
          { return INT16_LITERAL;
          }
        case 171: break;
        case 49: 
          { return T_SHR;
          }
        case 172: break;
        case 96: 
          { return T_STATIC;
          }
        case 173: break;
        case 43: 
          { return T_REF;
          }
        case 174: break;
        case 83: 
          { return T_MACRO;
          }
        case 175: break;
        case 63: 
          { return UINT32_LITERAL;
          }
        case 176: break;
        case 8: 
          { return T_DOT;
          }
        case 177: break;
        case 65: 
          { return T_TYPE;
          }
        case 178: break;
        case 24: 
          { return FLOAT64_LITERAL;
          }
        case 179: break;
        case 104: 
          { return T_GENERIC;
          }
        case 180: break;
        case 5: 
          { return INT_LITERAL;
          }
        case 181: break;
        case 21: 
          { blockCommentNestingLevel = 1; yybegin(ST_BLOCK_COMMENT); return BLOCK_COMMENT;
          }
        case 182: break;
        case 33: 
          { return T_IF;
          }
        case 183: break;
        case 4: 
          { return LINE_COMMENT;
          }
        case 184: break;
        case 72: 
          { return T_CAST;
          }
        case 185: break;
        case 11: 
          { return T_LBRACKET;
          }
        case 186: break;
        case 68: 
          { return T_ENUM;
          }
        case 187: break;
        case 94: 
          { return T_EXPORT;
          }
        case 188: break;
        case 41: 
          { return T_OUT;
          }
        case 189: break;
        case 110: 
          { return T_INTERFACE;
          }
        case 190: break;
        case 36: 
          { blockCommentNestingLevel++; return BLOCK_COMMENT;
          }
        case 191: break;
        case 30: 
          { return ACCENT_QUOTED;
          }
        case 192: break;
        case 29: 
          { return T_AS;
          }
        case 193: break;
        case 90: 
          { return T_WHILE;
          }
        case 194: break;
        case 2: 
          { return WHITE_SPACE;
          }
        case 195: break;
        case 39: 
          { return UINT8_LITERAL;
          }
        case 196: break;
        case 7: 
          { return OPERATOR;
          }
        case 197: break;
        case 69: 
          { return T_FROM;
          }
        case 198: break;
        case 86: 
          { return T_CONST;
          }
        case 199: break;
        case 74: 
          { return T_BIND;
          }
        case 200: break;
        case 101: 
          { return T_DISCARD;
          }
        case 201: break;
        case 92: 
          { return T_RETURN;
          }
        case 202: break;
        case 91: 
          { return T_OBJECT;
          }
        case 203: break;
        case 56: 
          { return T_VAR;
          }
        case 204: break;
        case 10: 
          { return T_COLON;
          }
        case 205: break;
        case 6: 
          { return CHARACTER_LITERAL;
          }
        case 206: break;
        case 102: 
          { return T_INCLUDE;
          }
        case 207: break;
        case 52: 
          { return T_NOT;
          }
        case 208: break;
        case 87: 
          { return T_BREAK;
          }
        case 209: break;
        case 31: 
          { return T_BRACEDOT;
          }
        case 210: break;
        case 62: 
          { return UINT64_LITERAL;
          }
        case 211: break;
        case 71: 
          { return T_ADDR;
          }
        case 212: break;
        case 93: 
          { return T_EXCEPT;
          }
        case 213: break;
        case 61: 
          { return UINT16_LITERAL;
          }
        case 214: break;
        case 89: 
          { return T_YIELD;
          }
        case 215: break;
        case 82: 
          { return T_NOTIN;
          }
        case 216: break;
        case 64: 
          { return BOOL_LITERAL;
          }
        case 217: break;
        case 12: 
          { return T_EQ;
          }
        case 218: break;
        case 45: 
          { return T_FOR;
          }
        case 219: break;
        case 38: 
          { return INT8_LITERAL;
          }
        case 220: break;
        case 107: 
          { return T_DISTINCT;
          }
        case 221: break;
        case 66: 
          { return T_ELSE;
          }
        case 222: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
