/* The following code was generated by JFlex 1.4.3 on 28.02.16 21:36 */

package org.dmitrigb.ideanim;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.intellij.psi.TokenType.*;
import static org.dmitrigb.ideanim.psi.NimTypes.*;

/**
 * A lexer for lexing Nim source.
 */

public class NimLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ST_BLOCK_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\3\1\7\1\5\1\0\1\1\1\6\16\3\4\0\1\7\1\35"+
    "\1\26\1\4\1\31\2\35\1\24\1\42\1\43\1\33\1\23\1\41"+
    "\1\23\1\21\1\35\1\12\1\14\6\16\2\10\1\30\1\40\1\35"+
    "\1\34\3\35\4\20\1\22\1\20\24\2\1\32\1\25\1\44\1\35"+
    "\1\11\1\27\1\45\1\13\1\55\1\46\1\60\1\64\1\66\1\67"+
    "\1\54\1\70\1\57\1\56\1\52\1\50\1\15\1\61\1\2\1\47"+
    "\1\51\1\53\1\62\1\63\1\71\1\17\1\65\1\2\1\36\1\35"+
    "\1\37\1\35\41\3\2\0\4\2\4\0\1\2\2\0\1\3\7\0"+
    "\1\2\4\0\1\2\5\0\27\2\1\0\37\2\1\0\u01ca\2\4\0"+
    "\14\2\16\0\5\2\7\0\1\2\1\0\1\2\21\0\160\3\5\2"+
    "\1\0\2\2\2\0\4\2\10\0\1\2\1\0\3\2\1\0\1\2"+
    "\1\0\24\2\1\0\123\2\1\0\213\2\1\0\5\3\2\0\236\2"+
    "\11\0\46\2\2\0\1\2\7\0\47\2\7\0\1\2\1\0\55\3"+
    "\1\0\1\3\1\0\2\3\1\0\2\3\1\0\1\3\10\0\33\2"+
    "\5\0\3\2\15\0\5\3\6\0\1\2\4\0\13\3\5\0\53\2"+
    "\37\3\4\0\2\2\1\3\143\2\1\0\1\2\10\3\1\0\6\3"+
    "\2\2\2\3\1\0\4\3\2\2\12\3\3\2\2\0\1\2\17\0"+
    "\1\3\1\2\1\3\36\2\33\3\2\0\131\2\13\3\1\2\16\0"+
    "\12\3\41\2\11\3\2\2\4\0\1\2\5\0\26\2\4\3\1\2"+
    "\11\3\1\2\3\3\1\2\5\3\22\0\31\2\3\3\104\0\1\2"+
    "\1\0\13\2\67\0\33\3\1\0\4\3\66\2\3\3\1\2\22\3"+
    "\1\2\7\3\12\2\2\3\2\0\12\3\1\0\7\2\1\0\7\2"+
    "\1\0\3\3\1\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2"+
    "\1\0\1\2\3\0\4\2\2\0\1\3\1\2\7\3\2\0\2\3"+
    "\2\0\3\3\1\2\10\0\1\3\4\0\2\2\1\0\3\2\2\3"+
    "\2\0\12\3\4\2\7\0\1\2\5\0\3\3\1\0\6\2\4\0"+
    "\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0\2\2\1\0"+
    "\2\2\2\0\1\3\1\0\5\3\4\0\2\3\2\0\3\3\3\0"+
    "\1\3\7\0\4\2\1\0\1\2\7\0\14\3\3\2\1\3\13\0"+
    "\3\3\1\0\11\2\1\0\3\2\1\0\26\2\1\0\7\2\1\0"+
    "\2\2\1\0\5\2\2\0\1\3\1\2\10\3\1\0\3\3\1\0"+
    "\3\3\2\0\1\2\17\0\2\2\2\3\2\0\12\3\1\0\1\2"+
    "\17\0\3\3\1\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2"+
    "\1\0\2\2\1\0\5\2\2\0\1\3\1\2\7\3\2\0\2\3"+
    "\2\0\3\3\10\0\2\3\4\0\2\2\1\0\3\2\2\3\2\0"+
    "\12\3\1\0\1\2\20\0\1\3\1\2\1\0\6\2\3\0\3\2"+
    "\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2\2\3\0\2\2"+
    "\3\0\3\2\3\0\14\2\4\0\5\3\3\0\3\3\1\0\4\3"+
    "\2\0\1\2\6\0\1\3\16\0\12\3\11\0\1\2\7\0\3\3"+
    "\1\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2"+
    "\3\0\1\2\7\3\1\0\3\3\1\0\4\3\7\0\2\3\1\0"+
    "\2\2\6\0\2\2\2\3\2\0\12\3\22\0\2\3\1\0\10\2"+
    "\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2\2\0\1\3"+
    "\1\2\7\3\1\0\3\3\1\0\4\3\7\0\2\3\7\0\1\2"+
    "\1\0\2\2\2\3\2\0\12\3\1\0\2\2\17\0\2\3\1\0"+
    "\10\2\1\0\3\2\1\0\51\2\2\0\1\2\7\3\1\0\3\3"+
    "\1\0\4\3\1\2\10\0\1\3\10\0\2\2\2\3\2\0\12\3"+
    "\12\0\6\2\2\0\2\3\1\0\22\2\3\0\30\2\1\0\11\2"+
    "\1\0\1\2\2\0\7\2\3\0\1\3\4\0\6\3\1\0\1\3"+
    "\1\0\10\3\22\0\2\3\15\0\60\2\1\3\2\2\7\3\4\0"+
    "\10\2\10\3\1\0\12\3\47\0\2\2\1\0\1\2\2\0\2\2"+
    "\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2"+
    "\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\3\2\2"+
    "\6\3\1\0\2\3\1\2\2\0\5\2\1\0\1\2\1\0\6\3"+
    "\2\0\12\3\2\0\4\2\40\0\1\2\27\0\2\3\6\0\12\3"+
    "\13\0\1\3\1\0\1\3\1\0\1\3\4\0\2\3\10\2\1\0"+
    "\44\2\4\0\24\3\1\0\2\3\5\2\13\3\1\0\44\3\11\0"+
    "\1\3\71\0\53\2\24\3\1\2\12\3\6\0\6\2\4\3\4\2"+
    "\3\3\1\2\3\3\2\2\7\3\3\2\4\3\15\2\14\3\1\2"+
    "\17\3\2\0\46\2\1\0\1\2\5\0\1\2\2\0\53\2\1\0"+
    "\u014d\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0"+
    "\51\2\1\0\4\2\2\0\41\2\1\0\4\2\2\0\7\2\1\0"+
    "\1\2\1\0\4\2\2\0\17\2\1\0\71\2\1\0\4\2\2\0"+
    "\103\2\2\0\3\3\40\0\20\2\20\0\125\2\14\0\u026c\2\2\0"+
    "\21\2\1\0\32\2\5\0\113\2\3\0\3\2\17\0\15\2\1\0"+
    "\4\2\3\3\13\0\22\2\3\3\13\0\22\2\2\3\14\0\15\2"+
    "\1\0\3\2\1\0\2\3\14\0\64\2\40\3\3\0\1\2\3\0"+
    "\2\2\1\3\2\0\12\3\41\0\3\3\2\0\12\3\6\0\130\2"+
    "\10\0\51\2\1\3\1\2\5\0\106\2\12\0\35\2\3\0\14\3"+
    "\4\0\14\3\12\0\12\3\36\2\2\0\5\2\13\0\54\2\4\0"+
    "\21\3\7\2\2\3\6\0\12\3\46\0\27\2\5\3\4\0\65\2"+
    "\12\3\1\0\35\3\2\0\13\3\6\0\12\3\15\0\1\2\130\0"+
    "\5\3\57\2\21\3\7\2\4\0\12\3\21\0\11\3\14\0\3\3"+
    "\36\2\15\3\2\2\12\3\54\2\16\3\14\0\44\2\24\3\10\0"+
    "\12\3\3\0\3\2\12\3\44\2\122\0\3\3\1\0\25\3\4\2"+
    "\1\3\4\2\3\3\2\2\11\0\300\2\47\3\25\0\4\3\u0116\2"+
    "\2\0\6\2\2\0\46\2\2\0\6\2\2\0\10\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\37\2\2\0\65\2\1\0\7\2"+
    "\1\0\1\2\3\0\3\2\1\0\7\2\3\0\4\2\2\0\6\2"+
    "\4\0\15\2\5\0\3\2\1\0\7\2\16\0\5\3\32\0\5\3"+
    "\20\0\2\2\23\0\1\2\13\0\5\3\5\0\6\3\1\0\1\2"+
    "\15\0\1\2\20\0\15\2\3\0\33\2\25\0\15\3\4\0\1\3"+
    "\3\0\14\3\21\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2"+
    "\3\0\5\2\6\0\1\2\1\0\1\2\1\0\1\2\1\0\4\2"+
    "\1\0\13\2\2\0\4\2\5\0\5\2\4\0\1\2\21\0\51\2"+
    "\u0a77\0\57\2\1\0\57\2\1\0\205\2\6\0\4\2\3\3\2\2"+
    "\14\0\46\2\1\0\1\2\5\0\1\2\2\0\70\2\7\0\1\2"+
    "\17\0\1\3\27\2\11\0\7\2\1\0\7\2\1\0\7\2\1\0"+
    "\7\2\1\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2\1\0"+
    "\40\3\57\0\1\2\u01d5\0\3\2\31\0\11\2\6\3\1\0\5\2"+
    "\2\0\5\2\4\0\126\2\2\0\2\3\2\0\3\2\1\0\132\2"+
    "\1\0\4\2\5\0\51\2\3\0\136\2\21\0\33\2\65\0\20\2"+
    "\u0200\0\u19b6\2\112\0\u51cd\2\63\0\u048d\2\103\0\56\2\2\0\u010d\2"+
    "\3\0\20\2\12\3\2\2\24\0\57\2\1\3\4\0\12\3\1\0"+
    "\31\2\7\0\1\3\120\2\2\3\45\0\11\2\2\0\147\2\2\0"+
    "\4\2\1\0\4\2\14\0\13\2\115\0\12\2\1\3\3\2\1\3"+
    "\4\2\1\3\27\2\5\3\20\0\1\2\7\0\64\2\14\0\2\3"+
    "\62\2\21\3\13\0\12\3\6\0\22\3\6\2\3\0\1\2\4\0"+
    "\12\3\34\2\10\3\2\0\27\2\15\3\14\0\35\2\3\0\4\3"+
    "\57\2\16\3\16\0\1\2\12\3\46\0\51\2\16\3\11\0\3\2"+
    "\1\3\10\2\2\3\2\0\12\3\6\0\27\2\3\0\1\2\1\3"+
    "\4\0\60\2\1\3\1\2\3\3\2\2\2\3\5\2\2\3\1\2"+
    "\1\3\1\2\30\0\3\2\2\0\13\2\5\3\2\0\3\2\2\3"+
    "\12\0\6\2\2\0\6\2\2\0\6\2\11\0\7\2\1\0\7\2"+
    "\221\0\43\2\10\3\1\0\2\3\2\0\12\3\6\0\u2ba4\2\14\0"+
    "\27\2\4\0\61\2\u2104\0\u016e\2\2\0\152\2\46\0\7\2\14\0"+
    "\5\2\5\0\1\2\1\3\12\2\1\0\15\2\1\0\5\2\1\0"+
    "\1\2\1\0\2\2\1\0\2\2\1\0\154\2\41\0\u016b\2\22\0"+
    "\100\2\2\0\66\2\50\0\15\2\3\0\20\3\20\0\7\3\14\0"+
    "\2\2\30\0\3\2\31\0\1\2\6\0\5\2\1\0\207\2\2\0"+
    "\1\3\4\0\1\2\13\0\12\3\7\0\32\2\4\0\1\2\1\0"+
    "\32\2\13\0\131\2\3\0\6\2\2\0\6\2\2\0\6\2\2\0"+
    "\3\2\3\0\2\2\3\0\2\2\22\0\3\3\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\2\5\3\3\1\6"+
    "\1\7\1\10\1\11\1\1\1\12\1\7\1\13\1\7"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\22\3\3\24\1\4\2\0\1\25\5\0\4\3\1\26"+
    "\1\3\1\27\1\3\1\30\1\31\1\10\2\0\1\11"+
    "\1\0\1\32\1\30\1\0\1\33\2\3\1\34\1\3"+
    "\1\35\20\3\1\36\1\37\2\3\1\40\22\3\1\41"+
    "\1\42\2\5\1\0\3\5\4\3\1\43\1\44\2\7"+
    "\1\3\1\45\1\46\2\3\1\47\3\3\1\50\1\51"+
    "\1\52\1\3\1\53\1\54\1\55\3\3\1\56\12\3"+
    "\1\57\2\3\1\60\4\3\1\61\1\3\1\62\1\63"+
    "\11\3\1\64\2\3\1\65\15\3\1\66\11\3\1\67"+
    "\1\70\2\3\1\71\1\72\1\73\1\74\1\3\1\75"+
    "\1\3\1\76\2\3\1\77\1\3\1\100\1\101\1\102"+
    "\4\3\1\103\1\104\1\3\1\105\1\3\1\106\1\107"+
    "\2\3\1\110\2\3\1\111\2\3\1\112\5\3\1\113"+
    "\1\3\1\114\2\3\1\115\1\116\1\117\2\3\1\120"+
    "\1\121\1\122\3\3\1\123\4\3\1\124\1\125\4\3"+
    "\1\126\2\3\1\127\2\3\1\130\1\3\1\131\1\132"+
    "\1\133\1\134\1\135\1\3\1\136\1\137\1\3\1\140"+
    "\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u02b8\0\u03a0\0\164\0\u03da\0\u02b8\0\u0414\0\164\0\164"+
    "\0\164\0\164\0\164\0\164\0\u044e\0\u0488\0\u04c2\0\u04fc"+
    "\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc"+
    "\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828\0\164\0\u0862"+
    "\0\u089c\0\u08d6\0\u0910\0\u094a\0\u08d6\0\u0984\0\u09be\0\u09f8"+
    "\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\350\0\u0b8e"+
    "\0\350\0\u0bc8\0\u0c02\0\164\0\164\0\u0c3c\0\u0c76\0\164"+
    "\0\u0366\0\164\0\u0cb0\0\u0c02\0\164\0\u0cea\0\u0d24\0\u0d5e"+
    "\0\u0d98\0\350\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4"+
    "\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4"+
    "\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\350\0\u125a"+
    "\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa"+
    "\0\u1634\0\164\0\164\0\u166e\0\u16a8\0\u16a8\0\u09f8\0\u0a32"+
    "\0\u0a6c\0\u16e2\0\u171c\0\u1756\0\u1790\0\350\0\350\0\u0c02"+
    "\0\u0cb0\0\u17ca\0\350\0\350\0\u1804\0\u183e\0\350\0\u1878"+
    "\0\u18b2\0\u18ec\0\350\0\u1926\0\350\0\u1960\0\350\0\350"+
    "\0\350\0\u199a\0\u19d4\0\u1a0e\0\350\0\u1a48\0\u1a82\0\u1abc"+
    "\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\350"+
    "\0\u1c8c\0\u1cc6\0\350\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\350"+
    "\0\u1de8\0\350\0\350\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a"+
    "\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\350\0\u202c\0\u2066\0\350"+
    "\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236"+
    "\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\350\0\u2392\0\u23cc"+
    "\0\u2406\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u2562\0\350"+
    "\0\350\0\u259c\0\u25d6\0\350\0\350\0\350\0\350\0\u2610"+
    "\0\350\0\u264a\0\350\0\u2684\0\u26be\0\u26f8\0\u2732\0\350"+
    "\0\350\0\350\0\u276c\0\u27a6\0\u27e0\0\u281a\0\350\0\350"+
    "\0\u2854\0\350\0\u288e\0\350\0\350\0\u28c8\0\u2902\0\350"+
    "\0\u293c\0\u2976\0\350\0\u29b0\0\u29ea\0\350\0\u2a24\0\u2a5e"+
    "\0\u2a98\0\u2ad2\0\u2b0c\0\350\0\u2b46\0\350\0\u2b80\0\u2bba"+
    "\0\350\0\350\0\350\0\u2bf4\0\u2c2e\0\350\0\350\0\350"+
    "\0\u2c68\0\u2ca2\0\u2cdc\0\350\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4"+
    "\0\350\0\350\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\350\0\u2ee6"+
    "\0\u2f20\0\350\0\u2f5a\0\u2f94\0\350\0\u2fce\0\350\0\350"+
    "\0\350\0\350\0\350\0\u3008\0\350\0\350\0\u3042\0\350"+
    "\0\350";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\3\1\6\3\4\1\7\1\5"+
    "\1\10\1\11\1\7\1\12\1\7\1\13\1\5\1\14"+
    "\1\5\1\15\1\16\1\15\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\15\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\5\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\2\5\1\56\4\57"+
    "\1\60\37\57\1\61\25\57\73\0\1\4\3\0\3\4"+
    "\64\0\2\5\4\0\11\5\1\0\1\5\6\0\1\5"+
    "\13\0\25\5\5\62\1\63\1\64\23\62\1\65\37\62"+
    "\10\0\3\7\1\0\1\7\1\0\1\7\2\0\1\66"+
    "\1\67\35\0\1\67\21\0\3\7\1\70\1\7\1\71"+
    "\1\7\1\72\1\0\1\66\1\67\35\0\1\67\13\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\2\5\1\73\4\5\1\74\1\5\1\75\13\5\2\0"+
    "\2\5\4\0\3\5\1\76\5\5\1\0\1\5\6\0"+
    "\1\5\13\0\2\5\1\77\12\5\1\100\1\5\1\101"+
    "\5\5\2\0\2\5\4\0\5\5\1\102\3\5\1\0"+
    "\1\5\6\0\1\5\13\0\25\5\21\0\1\103\1\0"+
    "\1\103\1\0\1\103\2\0\2\103\1\0\3\103\1\0"+
    "\1\104\53\0\1\103\1\0\1\103\1\0\1\103\2\0"+
    "\2\103\1\0\3\103\34\0\5\16\2\0\15\16\1\105"+
    "\1\106\44\16\5\17\2\0\16\17\1\107\1\110\43\17"+
    "\5\111\2\0\20\111\1\112\42\111\2\0\2\5\4\0"+
    "\11\5\1\103\1\5\1\103\1\0\1\103\2\0\1\103"+
    "\1\113\1\0\3\103\7\0\25\5\21\0\1\103\1\0"+
    "\1\103\1\0\1\103\2\0\1\114\1\103\1\0\3\103"+
    "\55\0\1\115\52\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\1\5\1\116\1\5\1\117\1\120"+
    "\1\5\1\121\16\5\2\0\2\5\4\0\5\5\1\122"+
    "\3\5\1\0\1\5\6\0\1\5\13\0\7\5\1\123"+
    "\3\5\1\124\11\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\1\125\12\5\1\126\11\5"+
    "\2\0\2\5\4\0\5\5\1\127\3\5\1\0\1\5"+
    "\6\0\1\5\13\0\7\5\1\130\15\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\6\5"+
    "\1\131\13\5\1\132\2\5\2\0\2\5\4\0\5\5"+
    "\1\133\3\5\1\0\1\5\6\0\1\5\13\0\1\134"+
    "\6\5\1\135\3\5\1\136\11\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\2\5\1\137"+
    "\10\5\1\140\1\5\1\141\2\5\1\142\4\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\3\5\1\143\1\144\1\145\1\146\10\5\1\147\5\5"+
    "\2\0\2\5\4\0\5\5\1\150\3\5\1\0\1\5"+
    "\6\0\1\5\13\0\1\151\24\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\13\5\1\152"+
    "\11\5\2\0\2\5\4\0\7\5\1\153\1\5\1\0"+
    "\1\5\6\0\1\5\13\0\3\5\1\154\5\5\1\155"+
    "\13\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\2\5\1\156\3\5\1\157\16\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\4\5\1\160\20\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\1\161\24\5\2\0\2\5"+
    "\4\0\5\5\1\162\3\5\1\0\1\5\6\0\1\5"+
    "\13\0\2\5\1\163\4\5\1\164\5\5\1\165\7\5"+
    "\2\0\2\5\4\0\11\5\1\0\1\5\6\0\1\5"+
    "\13\0\7\5\1\166\15\5\2\0\2\5\4\0\11\5"+
    "\1\0\1\5\6\0\1\5\13\0\13\5\1\167\11\5"+
    "\2\0\2\5\4\0\11\5\1\0\1\5\6\0\1\5"+
    "\13\0\7\5\1\170\12\5\1\171\2\5\32\0\1\172"+
    "\43\0\1\173\65\0\5\62\1\63\1\64\63\62\4\0"+
    "\1\62\2\0\1\63\67\0\1\63\74\0\3\174\1\0"+
    "\1\174\1\0\1\174\63\0\3\175\1\0\1\175\1\0"+
    "\1\175\4\0\1\176\57\0\2\177\1\0\1\177\66\0"+
    "\2\200\1\0\1\200\1\0\1\200\63\0\5\201\1\0"+
    "\1\201\1\0\1\201\1\0\1\201\22\0\2\201\6\0"+
    "\1\201\2\0\1\201\3\0\1\201\7\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\13\5\1\202"+
    "\11\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\3\5\1\203\21\5\2\0\2\5\4\0"+
    "\5\5\1\204\3\5\1\0\1\5\6\0\1\5\13\0"+
    "\25\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\23\5\1\205\1\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\6\5\1\206"+
    "\16\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\2\5\1\207\22\5\21\0\1\210\1\0"+
    "\1\210\1\0\1\210\2\0\2\210\1\0\3\210\34\0"+
    "\5\16\1\0\64\16\5\17\1\0\64\17\2\0\2\5"+
    "\4\0\11\5\1\210\1\5\1\210\1\0\1\210\2\0"+
    "\1\210\1\211\1\0\3\210\7\0\25\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\1\5"+
    "\1\212\23\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\1\5\1\213\23\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\5\5"+
    "\1\214\17\5\2\0\2\5\4\0\5\5\1\215\3\5"+
    "\1\0\1\5\6\0\1\5\13\0\25\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\4\5"+
    "\1\216\11\5\1\217\6\5\2\0\2\5\4\0\11\5"+
    "\1\0\1\5\6\0\1\5\13\0\17\5\1\220\5\5"+
    "\2\0\2\5\4\0\11\5\1\0\1\5\6\0\1\5"+
    "\13\0\7\5\1\221\15\5\2\0\2\5\4\0\11\5"+
    "\1\0\1\5\6\0\1\5\13\0\6\5\1\222\10\5"+
    "\1\223\5\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\6\5\1\224\16\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\11\5"+
    "\1\225\13\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\1\226\24\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\2\5\1\227"+
    "\6\5\1\230\13\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\1\5\1\231\23\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\10\5\1\232\14\5\2\0\2\5\4\0\7\5\1\233"+
    "\1\5\1\0\1\5\6\0\1\5\13\0\25\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\6\5\1\234\16\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\20\5\1\235\4\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\5\5\1\236\17\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\14\5\1\237\10\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\14\5\1\240\10\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\6\5\1\241\1\5\1\242"+
    "\14\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\3\5\1\243\21\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\14\5\1\244"+
    "\10\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\13\5\1\245\11\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\3\5\1\246"+
    "\21\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\4\5\1\247\20\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\6\5\1\250"+
    "\16\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\10\5\1\251\3\5\1\252\10\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\1\5\1\253\13\5\1\254\7\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\4\5\1\255"+
    "\2\5\1\256\15\5\2\0\2\5\4\0\5\5\1\257"+
    "\3\5\1\0\1\5\6\0\1\5\13\0\25\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\2\5\1\260\22\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\7\5\1\261\15\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\2\5\1\262\22\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\2\5\1\263\22\5\2\0"+
    "\2\5\4\0\5\5\1\264\3\5\1\0\1\5\6\0"+
    "\1\5\13\0\25\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\3\5\1\265\21\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\3\5\1\266\21\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\13\5\1\267\11\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\3\5\1\270\21\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\6\5\1\271\16\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\7\5\1\272\3\5\1\273\11\5\10\0\3\174\1\0"+
    "\1\174\1\0\1\174\3\0\1\67\35\0\1\67\21\0"+
    "\3\175\1\0\1\175\1\0\1\175\55\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\1\274\24\5"+
    "\2\0\2\5\4\0\11\5\1\0\1\5\6\0\1\5"+
    "\13\0\1\5\1\275\23\5\2\0\2\5\4\0\11\5"+
    "\1\0\1\5\6\0\1\5\13\0\10\5\1\276\14\5"+
    "\2\0\2\5\4\0\11\5\1\0\1\5\6\0\1\5"+
    "\13\0\13\5\1\277\11\5\2\0\2\5\4\0\11\5"+
    "\1\0\1\5\6\0\1\5\13\0\2\5\1\300\22\5"+
    "\2\0\2\5\4\0\11\5\1\0\1\5\6\0\1\5"+
    "\13\0\5\5\1\301\17\5\2\0\2\5\4\0\11\5"+
    "\1\0\1\5\6\0\1\5\13\0\6\5\1\302\1\5"+
    "\1\303\14\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\13\5\1\304\11\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\4\5"+
    "\1\305\20\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\15\5\1\306\7\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\7\5"+
    "\1\307\15\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\6\5\1\310\16\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\2\5"+
    "\1\311\22\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\7\5\1\312\15\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\22\5"+
    "\1\313\2\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\14\5\1\314\10\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\11\5"+
    "\1\315\13\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\13\5\1\316\11\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\13\5"+
    "\1\317\11\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\11\5\1\320\13\5\2\0\2\5"+
    "\4\0\5\5\1\321\3\5\1\0\1\5\6\0\1\5"+
    "\13\0\25\5\2\0\2\5\4\0\5\5\1\322\3\5"+
    "\1\0\1\5\6\0\1\5\13\0\25\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\2\5"+
    "\1\323\22\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\4\5\1\324\1\5\1\325\1\5"+
    "\1\326\5\5\1\327\6\5\2\0\2\5\4\0\11\5"+
    "\1\0\1\5\6\0\1\5\13\0\6\5\1\330\4\5"+
    "\1\331\11\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\13\5\1\332\11\5\2\0\2\5"+
    "\4\0\5\5\1\333\3\5\1\0\1\5\6\0\1\5"+
    "\13\0\25\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\5\5\1\334\17\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\13\5"+
    "\1\335\11\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\17\5\1\336\5\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\10\5"+
    "\1\337\14\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\3\5\1\340\21\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\5\5"+
    "\1\341\17\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\1\342\24\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\10\5\1\343"+
    "\14\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\11\5\1\344\13\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\13\5\1\345"+
    "\11\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\22\5\1\346\2\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\11\5\1\347"+
    "\13\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\3\5\1\350\21\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\12\5\1\351"+
    "\12\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\12\5\1\352\12\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\10\5\1\353"+
    "\14\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\7\5\1\354\15\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\7\5\1\355"+
    "\15\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\1\356\24\5\2\0\2\5\4\0\11\5"+
    "\1\0\1\5\6\0\1\5\13\0\2\5\1\357\22\5"+
    "\2\0\2\5\4\0\11\5\1\0\1\5\6\0\1\5"+
    "\13\0\13\5\1\360\11\5\2\0\2\5\4\0\11\5"+
    "\1\0\1\5\6\0\1\5\13\0\2\5\1\361\22\5"+
    "\2\0\2\5\4\0\11\5\1\0\1\5\6\0\1\5"+
    "\13\0\3\5\1\362\21\5\2\0\2\5\4\0\11\5"+
    "\1\0\1\5\6\0\1\5\13\0\7\5\1\363\15\5"+
    "\2\0\2\5\4\0\5\5\1\364\3\5\1\0\1\5"+
    "\6\0\1\5\13\0\25\5\2\0\2\5\4\0\11\5"+
    "\1\0\1\5\6\0\1\5\13\0\3\5\1\365\21\5"+
    "\2\0\2\5\4\0\5\5\1\366\3\5\1\0\1\5"+
    "\6\0\1\5\13\0\25\5\2\0\2\5\4\0\11\5"+
    "\1\0\1\5\6\0\1\5\13\0\11\5\1\367\13\5"+
    "\2\0\2\5\4\0\11\5\1\0\1\5\6\0\1\5"+
    "\13\0\13\5\1\370\11\5\2\0\2\5\4\0\11\5"+
    "\1\0\1\5\6\0\1\5\13\0\2\5\1\371\22\5"+
    "\2\0\2\5\4\0\11\5\1\0\1\5\6\0\1\5"+
    "\13\0\15\5\1\372\7\5\2\0\2\5\4\0\11\5"+
    "\1\0\1\5\6\0\1\5\13\0\6\5\1\373\16\5"+
    "\2\0\2\5\4\0\11\5\1\0\1\5\6\0\1\5"+
    "\13\0\2\5\1\374\22\5\2\0\2\5\4\0\11\5"+
    "\1\0\1\5\6\0\1\5\13\0\1\375\24\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\6\5\1\376\16\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\7\5\1\377\15\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\13\5\1\u0100\11\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\13\5\1\u0101\11\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\14\5\1\u0102\10\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\2\5\1\u0103\22\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\21\5\1\u0104\3\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\11\5\1\u0105\13\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\1\5\1\u0106\23\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\2\5\1\u0107\22\5\2\0"+
    "\2\5\4\0\5\5\1\u0108\3\5\1\0\1\5\6\0"+
    "\1\5\13\0\25\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\13\5\1\u0109\11\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\6\5\1\u010a\16\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\10\5\1\u010b\14\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\3\5\1\u010c\21\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\2\5\1\u010d\22\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\3\5\1\u010e\21\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\10\5\1\u010f\14\5\2\0"+
    "\2\5\4\0\11\5\1\0\1\5\6\0\1\5\13\0"+
    "\1\5\1\u0110\23\5\2\0\2\5\4\0\11\5\1\0"+
    "\1\5\6\0\1\5\13\0\1\u0111\24\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\17\5"+
    "\1\u0112\5\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\1\5\1\u0113\23\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\6\5"+
    "\1\u0114\16\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\6\5\1\u0115\16\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\3\5"+
    "\1\u0116\21\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\14\5\1\u0117\10\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\2\5"+
    "\1\u0118\22\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\6\5\1\u0119\16\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\6\5"+
    "\1\u011a\16\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\11\5\1\u011b\13\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\7\5"+
    "\1\u011c\15\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\15\5\1\u011d\7\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\10\5"+
    "\1\u011e\14\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\1\5\1\u011f\23\5\2\0\2\5"+
    "\4\0\11\5\1\0\1\5\6\0\1\5\13\0\6\5"+
    "\1\u0120\16\5\2\0\2\5\4\0\11\5\1\0\1\5"+
    "\6\0\1\5\13\0\1\u0121\24\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\13\5\1\u0122"+
    "\11\5\2\0\2\5\4\0\5\5\1\u0123\3\5\1\0"+
    "\1\5\6\0\1\5\13\0\25\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\15\5\1\u0124"+
    "\7\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\6\5\1\u0125\16\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\6\5\1\u0126"+
    "\16\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\20\5\1\u0127\4\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\10\5\1\u0128"+
    "\14\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\6\5\1\u0129\16\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\6\5\1\u012a"+
    "\16\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\13\5\1\u012b\11\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\10\5\1\u012c"+
    "\14\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\2\5\1\u012d\22\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\13\5\1\u012e"+
    "\11\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\13\5\1\u012f\11\5\2\0\2\5\4\0"+
    "\11\5\1\0\1\5\6\0\1\5\13\0\13\5\1\u0130"+
    "\11\5\2\0\2\5\4\0\11\5\1\0\1\5\6\0"+
    "\1\5\13\0\2\5\1\u0131\22\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12412];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\17\1\1\11\3\1\6\11\22\1\1\11"+
    "\3\1\2\0\1\1\5\0\11\1\2\11\2\0\1\11"+
    "\1\0\1\11\1\1\1\0\1\11\54\1\2\11\2\1"+
    "\1\0\263\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  int blockCommentNestingLevel = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public NimLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2256) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 79: 
          { return T_ATOMIC;
          }
        case 98: break;
        case 75: 
          { return T_USING;
          }
        case 99: break;
        case 63: 
          { return T_WITH;
          }
        case 100: break;
        case 88: 
          { return T_CONCEPT;
          }
        case 101: break;
        case 3: 
          { return IDENT;
          }
        case 102: break;
        case 20: 
          { return BLOCK_COMMENT;
          }
        case 103: break;
        case 93: 
          { return T_TEMPLATE;
          }
        case 104: break;
        case 72: 
          { return T_TUPLE;
          }
        case 105: break;
        case 16: 
          { return T_COMMA;
          }
        case 106: break;
        case 95: 
          { return T_CONTINUE;
          }
        case 107: break;
        case 71: 
          { return T_MIXIN;
          }
        case 108: break;
        case 82: 
          { return T_METHOD;
          }
        case 109: break;
        case 49: 
          { return T_PTR;
          }
        case 110: break;
        case 56: 
          { return T_CASE;
          }
        case 111: break;
        case 68: 
          { return T_RAISE;
          }
        case 112: break;
        case 73: 
          { return T_ISNOT;
          }
        case 113: break;
        case 46: 
          { return T_TRY;
          }
        case 114: break;
        case 47: 
          { return T_LET;
          }
        case 115: break;
        case 14: 
          { return T_RBRACE;
          }
        case 116: break;
        case 13: 
          { return T_LBRACE;
          }
        case 117: break;
        case 37: 
          { return T_AND;
          }
        case 118: break;
        case 59: 
          { return T_ELIF;
          }
        case 119: break;
        case 97: 
          { return T_CONVERTER;
          }
        case 120: break;
        case 66: 
          { return T_BLOCK;
          }
        case 121: break;
        case 83: 
          { return T_IMPORT;
          }
        case 122: break;
        case 25: 
          { return T_DOTBRACE;
          }
        case 123: break;
        case 5: 
          { return NUMBER_LITERAL;
          }
        case 124: break;
        case 48: 
          { return T_END;
          }
        case 125: break;
        case 94: 
          { return T_ITERATOR;
          }
        case 126: break;
        case 15: 
          { return T_SEMICOLON;
          }
        case 127: break;
        case 29: 
          { return T_DO;
          }
        case 128: break;
        case 30: 
          { return T_IN;
          }
        case 129: break;
        case 42: 
          { return T_NIL;
          }
        case 130: break;
        case 89: 
          { return T_FINALLY;
          }
        case 131: break;
        case 67: 
          { return T_DEFER;
          }
        case 132: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 133: break;
        case 45: 
          { return T_MOD;
          }
        case 134: break;
        case 24: 
          { if (yytext().equals("::"))
      return T_DBLCOLON;
    if (yytext().equals(".."))
      return T_DOTDOT;
    return OPERATOR;
          }
        case 135: break;
        case 23: 
          { return T_OF;
          }
        case 136: break;
        case 36: 
          { return T_XOR;
          }
        case 137: break;
        case 9: 
          { return STRING_LITERAL;
          }
        case 138: break;
        case 18: 
          { return T_RPAREN;
          }
        case 139: break;
        case 39: 
          { return T_DIV;
          }
        case 140: break;
        case 17: 
          { return T_LPAREN;
          }
        case 141: break;
        case 64: 
          { return T_WHEN;
          }
        case 142: break;
        case 34: 
          { if (--blockCommentNestingLevel == 0) yybegin(YYINITIAL);
      return BLOCK_COMMENT;
          }
        case 143: break;
        case 19: 
          { return T_RBRACKET;
          }
        case 144: break;
        case 91: 
          { return T_WITHOUT;
          }
        case 145: break;
        case 22: 
          { return T_OR;
          }
        case 146: break;
        case 44: 
          { return T_SHL;
          }
        case 147: break;
        case 62: 
          { return T_FUNC;
          }
        case 148: break;
        case 31: 
          { return T_IS;
          }
        case 149: break;
        case 60: 
          { return T_PROC;
          }
        case 150: break;
        case 38: 
          { return T_ASM;
          }
        case 151: break;
        case 43: 
          { return T_SHR;
          }
        case 152: break;
        case 81: 
          { return T_STATIC;
          }
        case 153: break;
        case 40: 
          { return T_REF;
          }
        case 154: break;
        case 70: 
          { return T_MACRO;
          }
        case 155: break;
        case 6: 
          { return T_DOT;
          }
        case 156: break;
        case 54: 
          { return T_TYPE;
          }
        case 157: break;
        case 90: 
          { return T_GENERIC;
          }
        case 158: break;
        case 21: 
          { blockCommentNestingLevel = 1; yybegin(ST_BLOCK_COMMENT); return BLOCK_COMMENT;
          }
        case 159: break;
        case 32: 
          { return T_IF;
          }
        case 160: break;
        case 4: 
          { return LINE_COMMENT;
          }
        case 161: break;
        case 55: 
          { return T_CAST;
          }
        case 162: break;
        case 11: 
          { return T_LBRACKET;
          }
        case 163: break;
        case 57: 
          { return T_ENUM;
          }
        case 164: break;
        case 85: 
          { return T_EXPORT;
          }
        case 165: break;
        case 35: 
          { return T_OUT;
          }
        case 166: break;
        case 96: 
          { return T_INTERFACE;
          }
        case 167: break;
        case 33: 
          { blockCommentNestingLevel++; return BLOCK_COMMENT;
          }
        case 168: break;
        case 26: 
          { return ACCENT_QUOTED;
          }
        case 169: break;
        case 28: 
          { return T_AS;
          }
        case 170: break;
        case 77: 
          { return T_WHILE;
          }
        case 171: break;
        case 2: 
          { return WHITE_SPACE;
          }
        case 172: break;
        case 7: 
          { return OPERATOR;
          }
        case 173: break;
        case 61: 
          { return T_FROM;
          }
        case 174: break;
        case 74: 
          { return T_CONST;
          }
        case 175: break;
        case 52: 
          { return T_BIND;
          }
        case 176: break;
        case 86: 
          { return T_DISCARD;
          }
        case 177: break;
        case 80: 
          { return T_RETURN;
          }
        case 178: break;
        case 78: 
          { return T_OBJECT;
          }
        case 179: break;
        case 50: 
          { return T_VAR;
          }
        case 180: break;
        case 10: 
          { return T_COLON;
          }
        case 181: break;
        case 8: 
          { return CHARACTER_LITERAL;
          }
        case 182: break;
        case 87: 
          { return T_INCLUDE;
          }
        case 183: break;
        case 41: 
          { return T_NOT;
          }
        case 184: break;
        case 27: 
          { return T_BRACEDOT;
          }
        case 185: break;
        case 65: 
          { return T_BREAK;
          }
        case 186: break;
        case 53: 
          { return T_ADDR;
          }
        case 187: break;
        case 84: 
          { return T_EXCEPT;
          }
        case 188: break;
        case 76: 
          { return T_YIELD;
          }
        case 189: break;
        case 69: 
          { return T_NOTIN;
          }
        case 190: break;
        case 12: 
          { return T_EQ;
          }
        case 191: break;
        case 51: 
          { return T_FOR;
          }
        case 192: break;
        case 92: 
          { return T_DISTINCT;
          }
        case 193: break;
        case 58: 
          { return T_ELSE;
          }
        case 194: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
