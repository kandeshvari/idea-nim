/* The following code was generated by JFlex 1.4.3 on 13.03.16 18:46 */

package org.dmitrigb.ideanim;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.intellij.psi.TokenType.*;
import static org.dmitrigb.ideanim.psi.NimTypes.*;

/**
 * A lexer for lexing Nim source.
 */

public class NimLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ST_BLOCK_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\6\1\0\1\1\1\7\22\0\1\10\1\43\1\35"+
    "\1\5\3\43\1\21\1\50\1\51\1\41\1\33\1\47\1\33\1\31"+
    "\1\43\1\12\1\14\1\27\1\26\1\30\1\16\1\25\1\16\1\24"+
    "\1\11\1\37\1\46\1\43\1\42\3\43\4\20\1\32\1\20\2\2"+
    "\1\23\13\2\1\22\5\2\1\40\1\34\1\52\1\43\1\3\1\36"+
    "\1\53\1\13\1\63\1\54\1\66\1\72\1\74\1\75\1\62\1\76"+
    "\1\65\1\64\1\60\1\56\1\15\1\67\1\2\1\55\1\57\1\61"+
    "\1\70\1\71\1\77\1\17\1\73\1\2\1\44\1\43\1\45\1\43"+
    "\53\0\1\2\12\0\1\2\4\0\1\2\5\0\27\2\1\0\37\2"+
    "\1\0\u01ca\2\4\0\14\2\16\0\5\2\7\0\1\2\1\0\1\2"+
    "\201\0\5\2\1\0\2\2\2\0\4\2\10\0\1\2\1\0\3\2"+
    "\1\0\1\2\1\0\24\2\1\0\123\2\1\0\213\2\10\0\236\2"+
    "\11\0\46\2\2\0\1\2\7\0\47\2\110\0\33\2\5\0\3\2"+
    "\55\0\53\2\25\0\12\4\4\0\2\2\1\0\143\2\1\0\1\2"+
    "\17\0\2\2\7\0\2\2\12\4\3\2\2\0\1\2\20\0\1\2"+
    "\1\0\36\2\35\0\131\2\13\0\1\2\16\0\12\4\41\2\11\0"+
    "\2\2\4\0\1\2\5\0\26\2\4\0\1\2\11\0\1\2\3\0"+
    "\1\2\27\0\31\2\107\0\1\2\1\0\13\2\127\0\66\2\3\0"+
    "\1\2\22\0\1\2\7\0\12\2\4\0\12\4\1\0\7\2\1\0"+
    "\7\2\5\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0"+
    "\1\2\3\0\4\2\3\0\1\2\20\0\1\2\15\0\2\2\1\0"+
    "\3\2\4\0\12\4\2\2\23\0\6\2\4\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\2\2\1\0\2\2\37\0\4\2"+
    "\1\0\1\2\7\0\12\4\2\0\3\2\20\0\11\2\1\0\3\2"+
    "\1\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2"+
    "\22\0\1\2\17\0\2\2\4\0\12\4\25\0\10\2\2\0\2\2"+
    "\2\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2"+
    "\36\0\2\2\1\0\3\2\4\0\12\4\1\0\1\2\21\0\1\2"+
    "\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2"+
    "\1\0\2\2\3\0\2\2\3\0\3\2\3\0\14\2\26\0\1\2"+
    "\25\0\12\4\25\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2"+
    "\1\0\5\2\3\0\1\2\32\0\2\2\6\0\2\2\4\0\12\4"+
    "\25\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2"+
    "\3\0\1\2\40\0\1\2\1\0\2\2\4\0\12\4\1\0\2\2"+
    "\22\0\10\2\1\0\3\2\1\0\51\2\2\0\1\2\20\0\1\2"+
    "\21\0\2\2\4\0\12\4\12\0\6\2\5\0\22\2\3\0\30\2"+
    "\1\0\11\2\1\0\1\2\2\0\7\2\72\0\60\2\1\0\2\2"+
    "\14\0\7\2\11\0\12\4\47\0\2\2\1\0\1\2\2\0\2\2"+
    "\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2"+
    "\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\0\2\2"+
    "\11\0\1\2\2\0\5\2\1\0\1\2\11\0\12\4\2\0\4\2"+
    "\40\0\1\2\37\0\12\4\26\0\10\2\1\0\44\2\33\0\5\2"+
    "\163\0\53\2\24\0\1\2\12\4\6\0\6\2\4\0\4\2\3\0"+
    "\1\2\3\0\2\2\7\0\3\2\4\0\15\2\14\0\1\2\1\0"+
    "\12\4\6\0\46\2\1\0\1\2\5\0\1\2\2\0\53\2\1\0"+
    "\u014d\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0"+
    "\51\2\1\0\4\2\2\0\41\2\1\0\4\2\2\0\7\2\1\0"+
    "\1\2\1\0\4\2\2\0\17\2\1\0\71\2\1\0\4\2\2\0"+
    "\103\2\45\0\20\2\20\0\125\2\14\0\u026c\2\2\0\21\2\1\0"+
    "\32\2\5\0\113\2\25\0\15\2\1\0\4\2\16\0\22\2\16\0"+
    "\22\2\16\0\15\2\1\0\3\2\17\0\64\2\43\0\1\2\4\0"+
    "\1\2\3\0\12\4\46\0\12\4\6\0\130\2\10\0\51\2\1\0"+
    "\1\2\5\0\106\2\12\0\35\2\51\0\12\4\36\2\2\0\5\2"+
    "\13\0\54\2\25\0\7\2\10\0\12\4\46\0\27\2\11\0\65\2"+
    "\53\0\12\4\6\0\12\4\15\0\1\2\135\0\57\2\21\0\7\2"+
    "\4\0\12\4\51\0\36\2\15\0\2\2\12\4\54\2\32\0\44\2"+
    "\34\0\12\4\3\0\3\2\12\4\44\2\153\0\4\2\1\0\4\2"+
    "\3\0\2\2\11\0\300\2\100\0\u0116\2\2\0\6\2\2\0\46\2"+
    "\2\0\6\2\2\0\10\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\37\2\2\0\65\2\1\0\7\2\1\0\1\2\3\0\3\2"+
    "\1\0\7\2\3\0\4\2\2\0\6\2\4\0\15\2\5\0\3\2"+
    "\1\0\7\2\26\0\1\2\135\0\1\2\15\0\1\2\20\0\15\2"+
    "\145\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2"+
    "\6\0\1\2\1\0\1\2\1\0\1\2\1\0\4\2\1\0\13\2"+
    "\2\0\4\2\5\0\5\2\4\0\1\2\64\0\2\2\u0a7b\0\57\2"+
    "\1\0\57\2\1\0\205\2\6\0\4\2\3\0\2\2\14\0\46\2"+
    "\1\0\1\2\5\0\1\2\2\0\70\2\7\0\1\2\20\0\27\2"+
    "\11\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2"+
    "\1\0\7\2\1\0\7\2\1\0\7\2\120\0\1\2\u01d5\0\2\2"+
    "\52\0\5\2\5\0\2\2\4\0\126\2\6\0\3\2\1\0\132\2"+
    "\1\0\4\2\5\0\51\2\3\0\136\2\21\0\33\2\65\0\20\2"+
    "\u0200\0\u19b6\2\112\0\u51cd\2\63\0\u048d\2\103\0\56\2\2\0\u010d\2"+
    "\3\0\20\2\12\4\2\2\24\0\57\2\20\0\31\2\10\0\106\2"+
    "\61\0\11\2\2\0\147\2\2\0\4\2\1\0\4\2\14\0\13\2"+
    "\115\0\12\2\1\0\3\2\1\0\4\2\1\0\27\2\35\0\64\2"+
    "\16\0\62\2\34\0\12\4\30\0\6\2\3\0\1\2\4\0\12\4"+
    "\34\2\12\0\27\2\31\0\35\2\7\0\57\2\34\0\1\2\12\4"+
    "\46\0\51\2\27\0\3\2\1\0\10\2\4\0\12\4\6\0\27\2"+
    "\3\0\1\2\5\0\60\2\1\0\1\2\3\0\2\2\2\0\5\2"+
    "\2\0\1\2\1\0\1\2\30\0\3\2\2\0\13\2\7\0\3\2"+
    "\14\0\6\2\2\0\6\2\2\0\6\2\11\0\7\2\1\0\7\2"+
    "\221\0\43\2\15\0\12\4\6\0\u2ba4\2\14\0\27\2\4\0\61\2"+
    "\u2104\0\u016e\2\2\0\152\2\46\0\7\2\14\0\5\2\5\0\1\2"+
    "\1\0\12\2\1\0\15\2\1\0\5\2\1\0\1\2\1\0\2\2"+
    "\1\0\2\2\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2"+
    "\50\0\14\2\164\0\5\2\1\0\207\2\23\0\12\4\7\0\32\2"+
    "\6\0\32\2\13\0\131\2\3\0\6\2\2\0\6\2\2\0\6\2"+
    "\2\0\3\2\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\2\5\3\3\1\6"+
    "\1\7\1\10\1\11\1\1\1\12\1\13\1\10\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\22\3"+
    "\3\24\1\0\1\4\2\0\1\25\6\0\4\3\1\26"+
    "\1\3\1\27\1\3\1\6\1\0\1\30\1\31\1\0"+
    "\1\11\1\0\1\32\1\0\1\33\2\3\1\34\1\3"+
    "\1\35\20\3\1\36\1\37\2\3\1\40\22\3\1\41"+
    "\1\42\1\5\1\0\2\5\1\0\3\5\4\3\1\43"+
    "\1\44\1\10\1\3\1\45\1\46\2\3\1\47\3\3"+
    "\1\50\1\51\1\52\1\3\1\53\1\54\1\55\3\3"+
    "\1\56\12\3\1\57\2\3\1\60\4\3\1\61\1\3"+
    "\1\62\1\63\10\3\1\0\1\5\2\0\1\3\1\64"+
    "\2\3\1\65\15\3\1\66\11\3\1\67\1\70\2\3"+
    "\1\71\1\72\1\73\1\74\1\3\1\75\1\3\1\76"+
    "\2\3\1\77\1\3\1\100\1\101\1\102\4\3\1\103"+
    "\1\104\1\3\1\105\1\3\1\106\1\107\2\3\1\110"+
    "\2\3\1\111\2\3\1\112\5\3\1\113\1\3\1\114"+
    "\2\3\1\115\1\116\1\117\2\3\1\120\1\121\1\122"+
    "\3\3\1\123\4\3\1\124\1\125\4\3\1\126\2\3"+
    "\1\127\2\3\1\130\1\3\1\131\1\132\1\133\1\134"+
    "\1\135\1\3\1\136\1\137\1\3\1\140\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0340\0\200\0\u0400\0\u0340\0\u0440\0\200\0\200\0\200"+
    "\0\200\0\200\0\200\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580"+
    "\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780"+
    "\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\200\0\u0900\0\u0940"+
    "\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u09c0\0\u0a80\0\u0ac0\0\u0b00"+
    "\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0100"+
    "\0\u0d00\0\u0100\0\u0d40\0\200\0\u0d80\0\u0dc0\0\200\0\u0e00"+
    "\0\200\0\u03c0\0\200\0\u0dc0\0\200\0\u0e40\0\u0e80\0\u0ec0"+
    "\0\u0f00\0\u0100\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080"+
    "\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280"+
    "\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400\0\u0100\0\u1440"+
    "\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640"+
    "\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840"+
    "\0\u1880\0\200\0\200\0\u18c0\0\u18c0\0\u1900\0\u1940\0\u1980"+
    "\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u0100"+
    "\0\u0100\0\u0dc0\0\u1b80\0\u0100\0\u0100\0\u1bc0\0\u1c00\0\u0100"+
    "\0\u1c40\0\u1c80\0\u1cc0\0\u0100\0\u1d00\0\u0100\0\u1d40\0\u0100"+
    "\0\u0100\0\u0100\0\u1d80\0\u1dc0\0\u1e00\0\u0100\0\u1e40\0\u1e80"+
    "\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080"+
    "\0\u0100\0\u20c0\0\u2100\0\u0100\0\u2140\0\u2180\0\u21c0\0\u2200"+
    "\0\u0100\0\u2240\0\u0100\0\u0100\0\u2280\0\u22c0\0\u2300\0\u2340"+
    "\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480\0\200\0\u24c0\0\u2500"+
    "\0\u2540\0\u0100\0\u2580\0\u25c0\0\u0100\0\u2600\0\u2640\0\u2680"+
    "\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840\0\u2880"+
    "\0\u28c0\0\u2900\0\u0100\0\u2940\0\u2980\0\u29c0\0\u2a00\0\u2a40"+
    "\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u0100\0\u0100\0\u2b80\0\u2bc0"+
    "\0\u0100\0\u0100\0\u0100\0\u0100\0\u2c00\0\u0100\0\u2c40\0\u0100"+
    "\0\u2c80\0\u2cc0\0\u2d00\0\u2d40\0\u0100\0\u0100\0\u0100\0\u2d80"+
    "\0\u2dc0\0\u2e00\0\u2e40\0\u0100\0\u0100\0\u2e80\0\u0100\0\u2ec0"+
    "\0\u0100\0\u0100\0\u2f00\0\u2f40\0\u0100\0\u2f80\0\u2fc0\0\u0100"+
    "\0\u3000\0\u3040\0\u0100\0\u3080\0\u30c0\0\u3100\0\u3140\0\u3180"+
    "\0\u0100\0\u31c0\0\u0100\0\u3200\0\u3240\0\u0100\0\u0100\0\u0100"+
    "\0\u3280\0\u32c0\0\u0100\0\u0100\0\u0100\0\u3300\0\u3340\0\u3380"+
    "\0\u0100\0\u33c0\0\u3400\0\u3440\0\u3480\0\u0100\0\u0100\0\u34c0"+
    "\0\u3500\0\u3540\0\u3580\0\u0100\0\u35c0\0\u3600\0\u0100\0\u3640"+
    "\0\u3680\0\u0100\0\u36c0\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100"+
    "\0\u3700\0\u0100\0\u0100\0\u3740\0\u0100\0\u0100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\2\3\1\6\3\4\1\7\1\10"+
    "\1\11\1\7\1\12\1\7\1\13\1\5\1\14\2\5"+
    "\5\7\1\15\1\5\2\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\16\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\5\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\2\5\1\55\5\56\1\57"+
    "\44\56\1\60\25\56\101\0\1\4\4\0\3\4\71\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\7\5\1\0"+
    "\1\5\20\0\25\5\6\62\1\63\1\64\30\62\1\65"+
    "\37\62\3\0\1\7\5\0\2\7\1\0\1\7\1\0"+
    "\1\7\2\0\1\66\2\0\5\7\1\67\1\70\33\0"+
    "\1\70\14\0\1\7\5\0\2\7\1\71\1\7\1\72"+
    "\1\7\1\73\1\0\1\66\2\0\5\7\1\67\1\70"+
    "\33\0\1\70\13\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\2\5\1\74\4\5"+
    "\1\75\1\5\1\76\13\5\2\0\1\5\1\61\1\5"+
    "\4\0\2\5\1\77\5\5\1\0\7\5\1\0\1\5"+
    "\20\0\2\5\1\100\12\5\1\101\1\5\1\102\5\5"+
    "\2\0\1\5\1\61\1\5\4\0\4\5\1\103\3\5"+
    "\1\0\7\5\1\0\1\5\20\0\25\5\6\14\2\0"+
    "\11\14\1\104\12\14\1\105\43\14\31\0\1\106\1\0"+
    "\2\106\2\0\1\106\1\0\3\106\1\0\1\107\63\0"+
    "\1\106\1\0\2\106\2\0\1\106\1\0\3\106\34\0"+
    "\6\17\2\0\24\17\1\110\1\111\42\17\6\112\2\0"+
    "\26\112\1\113\41\112\31\0\1\106\1\0\2\106\2\0"+
    "\1\114\1\0\3\106\65\0\1\115\50\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\7\5\1\0\1\5\20\0"+
    "\1\5\1\116\1\5\1\117\1\120\1\5\1\121\16\5"+
    "\2\0\1\5\1\61\1\5\4\0\4\5\1\122\3\5"+
    "\1\0\7\5\1\0\1\5\20\0\7\5\1\123\3\5"+
    "\1\124\11\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\1\125\12\5\1\126"+
    "\11\5\2\0\1\5\1\61\1\5\4\0\4\5\1\127"+
    "\3\5\1\0\7\5\1\0\1\5\20\0\7\5\1\130"+
    "\15\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\7\5\1\0\1\5\20\0\6\5\1\131\13\5\1\132"+
    "\2\5\2\0\1\5\1\61\1\5\4\0\4\5\1\133"+
    "\3\5\1\0\7\5\1\0\1\5\20\0\1\134\6\5"+
    "\1\135\3\5\1\136\11\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\2\5"+
    "\1\137\10\5\1\140\1\5\1\141\2\5\1\142\4\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\3\5\1\143\1\144\1\145\1\146"+
    "\10\5\1\147\5\5\2\0\1\5\1\61\1\5\4\0"+
    "\4\5\1\150\3\5\1\0\7\5\1\0\1\5\20\0"+
    "\1\151\24\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\13\5\1\152\11\5"+
    "\2\0\1\5\1\61\1\5\4\0\6\5\1\153\1\5"+
    "\1\0\7\5\1\0\1\5\20\0\3\5\1\154\5\5"+
    "\1\155\13\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\2\5\1\156\3\5"+
    "\1\157\16\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\4\5\1\160\20\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\1\161\24\5\2\0\1\5\1\61"+
    "\1\5\4\0\4\5\1\162\3\5\1\0\7\5\1\0"+
    "\1\5\20\0\2\5\1\163\4\5\1\164\5\5\1\165"+
    "\7\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\7\5\1\0\1\5\20\0\7\5\1\166\15\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\7\5\1\0"+
    "\1\5\20\0\13\5\1\167\11\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\7\5\1\0\1\5\20\0"+
    "\7\5\1\170\12\5\1\171\2\5\40\0\1\172\44\0"+
    "\1\173\74\0\1\5\1\0\1\5\4\0\10\5\1\0"+
    "\7\5\1\0\1\5\20\0\25\5\6\62\1\63\1\64"+
    "\70\62\5\0\1\62\2\0\1\63\75\0\1\63\113\0"+
    "\1\174\1\175\36\0\1\175\5\0\1\174\12\0\1\176"+
    "\5\0\2\176\1\0\1\176\1\0\1\176\5\0\5\176"+
    "\52\0\1\177\5\0\2\177\1\0\1\177\1\0\1\177"+
    "\5\0\5\177\2\0\1\200\47\0\1\201\6\0\1\201"+
    "\1\0\1\201\66\0\1\202\6\0\1\202\1\0\1\202"+
    "\1\0\1\202\6\0\4\202\52\0\1\203\5\0\4\203"+
    "\1\0\1\203\1\0\1\203\3\0\5\203\1\0\1\203"+
    "\20\0\2\203\6\0\1\203\2\0\1\203\3\0\1\203"+
    "\7\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\13\5\1\204\11\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\3\5\1\205\21\5\2\0\1\5\1\61\1\5"+
    "\4\0\4\5\1\206\3\5\1\0\7\5\1\0\1\5"+
    "\20\0\25\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\23\5\1\207\1\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\6\5\1\210\16\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\2\5\1\211\22\5\6\14\1\0\71\14\31\0"+
    "\1\212\1\0\2\212\2\0\1\212\1\0\3\212\34\0"+
    "\6\17\1\0\71\17\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\7\5\1\0\1\5\20\0\1\5\1\213"+
    "\23\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\7\5\1\0\1\5\20\0\1\5\1\214\23\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\7\5\1\0"+
    "\1\5\20\0\5\5\1\215\17\5\2\0\1\5\1\61"+
    "\1\5\4\0\4\5\1\216\3\5\1\0\7\5\1\0"+
    "\1\5\20\0\25\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\7\5\1\0\1\5\20\0\4\5\1\217"+
    "\11\5\1\220\6\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\7\5\1\0\1\5\20\0\17\5\1\221"+
    "\5\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\7\5\1\0\1\5\20\0\7\5\1\222\15\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\7\5\1\0"+
    "\1\5\20\0\6\5\1\223\10\5\1\224\5\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\7\5\1\0"+
    "\1\5\20\0\6\5\1\225\16\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\7\5\1\0\1\5\20\0"+
    "\11\5\1\226\13\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\7\5\1\0\1\5\20\0\1\227\24\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\2\5\1\230\6\5\1\231\13\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\1\5\1\232\23\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\10\5\1\233\14\5\2\0\1\5\1\61\1\5"+
    "\4\0\6\5\1\234\1\5\1\0\7\5\1\0\1\5"+
    "\20\0\25\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\6\5\1\235\16\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\20\5\1\236\4\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\5\5\1\237\17\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\14\5"+
    "\1\240\10\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\14\5\1\241\10\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\6\5\1\242\1\5\1\243\14\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\3\5\1\244\21\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\14\5\1\245\10\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\13\5"+
    "\1\246\11\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\3\5\1\247\21\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\4\5\1\250\20\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\6\5\1\251\16\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\10\5"+
    "\1\252\3\5\1\253\10\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\1\5"+
    "\1\254\13\5\1\255\7\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\4\5"+
    "\1\256\2\5\1\257\15\5\2\0\1\5\1\61\1\5"+
    "\4\0\4\5\1\260\3\5\1\0\7\5\1\0\1\5"+
    "\20\0\25\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\2\5\1\261\22\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\7\5\1\262\15\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\2\5\1\263\22\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\2\5"+
    "\1\264\22\5\2\0\1\5\1\61\1\5\4\0\4\5"+
    "\1\265\3\5\1\0\7\5\1\0\1\5\20\0\25\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\3\5\1\266\21\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\3\5\1\267\21\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\13\5"+
    "\1\270\11\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\3\5\1\271\21\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\6\5\1\272\16\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\7\5\1\273\3\5\1\274\11\5\14\0\1\275"+
    "\7\0\1\276\1\277\1\300\54\0\1\176\5\0\2\176"+
    "\1\0\1\176\1\0\1\176\2\0\1\66\2\0\5\176"+
    "\1\0\1\70\33\0\1\70\14\0\1\177\5\0\2\177"+
    "\1\0\1\177\1\0\1\177\2\0\1\66\2\0\5\177"+
    "\52\0\1\177\5\0\2\177\1\0\1\177\1\0\1\177"+
    "\5\0\5\177\52\0\1\201\6\0\1\201\1\0\1\201"+
    "\4\0\1\66\61\0\1\202\6\0\1\202\1\0\1\202"+
    "\1\0\1\202\2\0\1\66\3\0\4\202\52\0\1\203"+
    "\5\0\4\203\1\0\1\203\1\0\1\203\1\66\2\0"+
    "\5\203\1\0\1\203\20\0\2\203\6\0\1\203\2\0"+
    "\1\203\3\0\1\203\7\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\7\5\1\0\1\5\20\0\1\301\24\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\1\5\1\302\23\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\10\5\1\303\14\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\13\5"+
    "\1\304\11\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\2\5\1\305\22\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\5\5\1\306\17\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\6\5\1\307\1\5\1\310\14\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\13\5\1\311\11\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\4\5"+
    "\1\312\20\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\15\5\1\313\7\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\7\5\1\314\15\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\6\5\1\315\16\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\2\5"+
    "\1\316\22\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\7\5\1\317\15\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\22\5\1\320\2\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\14\5\1\321\10\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\11\5"+
    "\1\322\13\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\13\5\1\323\11\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\13\5\1\324\11\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\11\5\1\325\13\5\2\0\1\5\1\61\1\5"+
    "\4\0\4\5\1\326\3\5\1\0\7\5\1\0\1\5"+
    "\20\0\25\5\2\0\1\5\1\61\1\5\4\0\4\5"+
    "\1\327\3\5\1\0\7\5\1\0\1\5\20\0\25\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\2\5\1\330\22\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\4\5\1\331\1\5\1\332\1\5\1\333\5\5"+
    "\1\334\6\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\6\5\1\335\4\5"+
    "\1\336\11\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\13\5\1\337\11\5"+
    "\2\0\1\5\1\61\1\5\4\0\4\5\1\340\3\5"+
    "\1\0\7\5\1\0\1\5\20\0\25\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\5\5\1\341\17\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\13\5"+
    "\1\342\11\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\17\5\1\343\5\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\10\5\1\344\14\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\3\5\1\345\21\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\5\5"+
    "\1\346\17\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\1\347\24\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\7\5\1\0"+
    "\1\5\20\0\10\5\1\350\14\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\7\5\1\0\1\5\20\0"+
    "\11\5\1\351\13\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\7\5\1\0\1\5\20\0\13\5\1\352"+
    "\11\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\7\5\1\0\1\5\20\0\22\5\1\353\2\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\7\5\1\0"+
    "\1\5\20\0\11\5\1\354\13\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\7\5\1\0\1\5\20\0"+
    "\3\5\1\355\21\5\25\0\1\276\102\0\1\276\76\0"+
    "\1\276\52\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\7\5\1\0\1\5\20\0\12\5\1\356\12\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\7\5\1\0"+
    "\1\5\20\0\12\5\1\357\12\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\7\5\1\0\1\5\20\0"+
    "\10\5\1\360\14\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\7\5\1\0\1\5\20\0\7\5\1\361"+
    "\15\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\7\5\1\0\1\5\20\0\7\5\1\362\15\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\7\5\1\0"+
    "\1\5\20\0\1\363\24\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\2\5"+
    "\1\364\22\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\13\5\1\365\11\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\2\5\1\366\22\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\3\5\1\367\21\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\7\5"+
    "\1\370\15\5\2\0\1\5\1\61\1\5\4\0\4\5"+
    "\1\371\3\5\1\0\7\5\1\0\1\5\20\0\25\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\3\5\1\372\21\5\2\0\1\5"+
    "\1\61\1\5\4\0\4\5\1\373\3\5\1\0\7\5"+
    "\1\0\1\5\20\0\25\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\11\5"+
    "\1\374\13\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\13\5\1\375\11\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\2\5\1\376\22\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\15\5\1\377\7\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\6\5"+
    "\1\u0100\16\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\2\5\1\u0101\22\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\1\u0102\24\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\7\5\1\0\1\5\20\0"+
    "\6\5\1\u0103\16\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\7\5\1\0\1\5\20\0\7\5\1\u0104"+
    "\15\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\7\5\1\0\1\5\20\0\13\5\1\u0105\11\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\7\5\1\0"+
    "\1\5\20\0\13\5\1\u0106\11\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\7\5\1\0\1\5\20\0"+
    "\14\5\1\u0107\10\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\7\5\1\0\1\5\20\0\2\5\1\u0108"+
    "\22\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\7\5\1\0\1\5\20\0\21\5\1\u0109\3\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\7\5\1\0"+
    "\1\5\20\0\11\5\1\u010a\13\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\7\5\1\0\1\5\20\0"+
    "\1\5\1\u010b\23\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\7\5\1\0\1\5\20\0\2\5\1\u010c"+
    "\22\5\2\0\1\5\1\61\1\5\4\0\4\5\1\u010d"+
    "\3\5\1\0\7\5\1\0\1\5\20\0\25\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\7\5\1\0"+
    "\1\5\20\0\13\5\1\u010e\11\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\7\5\1\0\1\5\20\0"+
    "\6\5\1\u010f\16\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\7\5\1\0\1\5\20\0\10\5\1\u0110"+
    "\14\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\7\5\1\0\1\5\20\0\3\5\1\u0111\21\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\7\5\1\0"+
    "\1\5\20\0\2\5\1\u0112\22\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\7\5\1\0\1\5\20\0"+
    "\3\5\1\u0113\21\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\7\5\1\0\1\5\20\0\10\5\1\u0114"+
    "\14\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\7\5\1\0\1\5\20\0\1\5\1\u0115\23\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\7\5\1\0"+
    "\1\5\20\0\1\u0116\24\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\17\5"+
    "\1\u0117\5\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\1\5\1\u0118\23\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\6\5\1\u0119\16\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\6\5\1\u011a\16\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\3\5"+
    "\1\u011b\21\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\14\5\1\u011c\10\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\2\5\1\u011d\22\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\6\5\1\u011e\16\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\6\5"+
    "\1\u011f\16\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\11\5\1\u0120\13\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\7\5\1\u0121\15\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\15\5\1\u0122\7\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\7\5\1\0\1\5\20\0\10\5"+
    "\1\u0123\14\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\7\5\1\0\1\5\20\0\1\5\1\u0124\23\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\7\5"+
    "\1\0\1\5\20\0\6\5\1\u0125\16\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\7\5\1\0\1\5"+
    "\20\0\1\u0126\24\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\7\5\1\0\1\5\20\0\13\5\1\u0127"+
    "\11\5\2\0\1\5\1\61\1\5\4\0\4\5\1\u0128"+
    "\3\5\1\0\7\5\1\0\1\5\20\0\25\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\7\5\1\0"+
    "\1\5\20\0\15\5\1\u0129\7\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\7\5\1\0\1\5\20\0"+
    "\6\5\1\u012a\16\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\7\5\1\0\1\5\20\0\6\5\1\u012b"+
    "\16\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\7\5\1\0\1\5\20\0\20\5\1\u012c\4\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\7\5\1\0"+
    "\1\5\20\0\10\5\1\u012d\14\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\7\5\1\0\1\5\20\0"+
    "\6\5\1\u012e\16\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\7\5\1\0\1\5\20\0\6\5\1\u012f"+
    "\16\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\7\5\1\0\1\5\20\0\13\5\1\u0130\11\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\7\5\1\0"+
    "\1\5\20\0\10\5\1\u0131\14\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\7\5\1\0\1\5\20\0"+
    "\2\5\1\u0132\22\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\7\5\1\0\1\5\20\0\13\5\1\u0133"+
    "\11\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\7\5\1\0\1\5\20\0\13\5\1\u0134\11\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\7\5\1\0"+
    "\1\5\20\0\13\5\1\u0135\11\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\7\5\1\0\1\5\20\0"+
    "\2\5\1\u0136\22\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14208];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\16\1\1\11\3\1\6\11\22\1\1\11"+
    "\2\1\1\0\1\1\2\0\1\1\6\0\10\1\1\11"+
    "\1\0\1\1\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\54\1\2\11\1\1\1\0\2\1\1\0\74\1"+
    "\1\0\1\11\2\0\166\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  int blockCommentNestingLevel = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public NimLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1746) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 79: 
          { return T_ATOMIC;
          }
        case 98: break;
        case 75: 
          { return T_USING;
          }
        case 99: break;
        case 63: 
          { return T_WITH;
          }
        case 100: break;
        case 88: 
          { return T_CONCEPT;
          }
        case 101: break;
        case 3: 
          { return IDENT;
          }
        case 102: break;
        case 20: 
          { return BLOCK_COMMENT;
          }
        case 103: break;
        case 93: 
          { return T_TEMPLATE;
          }
        case 104: break;
        case 72: 
          { return T_TUPLE;
          }
        case 105: break;
        case 16: 
          { return T_COMMA;
          }
        case 106: break;
        case 95: 
          { return T_CONTINUE;
          }
        case 107: break;
        case 71: 
          { return T_MIXIN;
          }
        case 108: break;
        case 82: 
          { return T_METHOD;
          }
        case 109: break;
        case 49: 
          { return T_PTR;
          }
        case 110: break;
        case 56: 
          { return T_CASE;
          }
        case 111: break;
        case 68: 
          { return T_RAISE;
          }
        case 112: break;
        case 73: 
          { return T_ISNOT;
          }
        case 113: break;
        case 46: 
          { return T_TRY;
          }
        case 114: break;
        case 47: 
          { return T_LET;
          }
        case 115: break;
        case 14: 
          { return T_RBRACE;
          }
        case 116: break;
        case 13: 
          { return T_LBRACE;
          }
        case 117: break;
        case 37: 
          { return T_AND;
          }
        case 118: break;
        case 59: 
          { return T_ELIF;
          }
        case 119: break;
        case 97: 
          { return T_CONVERTER;
          }
        case 120: break;
        case 66: 
          { return T_BLOCK;
          }
        case 121: break;
        case 83: 
          { return T_IMPORT;
          }
        case 122: break;
        case 25: 
          { return T_DOTBRACE;
          }
        case 123: break;
        case 5: 
          { return NUMBER_LITERAL;
          }
        case 124: break;
        case 48: 
          { return T_END;
          }
        case 125: break;
        case 94: 
          { return T_ITERATOR;
          }
        case 126: break;
        case 15: 
          { return T_SEMICOLON;
          }
        case 127: break;
        case 29: 
          { return T_DO;
          }
        case 128: break;
        case 30: 
          { return T_IN;
          }
        case 129: break;
        case 42: 
          { return T_NIL;
          }
        case 130: break;
        case 89: 
          { return T_FINALLY;
          }
        case 131: break;
        case 67: 
          { return T_DEFER;
          }
        case 132: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 133: break;
        case 45: 
          { return T_MOD;
          }
        case 134: break;
        case 24: 
          { if (yytext().equals("::"))
      return T_DBLCOLON;
    if (yytext().equals(".."))
      return T_DOTDOT;
    return OPERATOR;
          }
        case 135: break;
        case 23: 
          { return T_OF;
          }
        case 136: break;
        case 36: 
          { return T_XOR;
          }
        case 137: break;
        case 9: 
          { return STRING_LITERAL;
          }
        case 138: break;
        case 18: 
          { return T_RPAREN;
          }
        case 139: break;
        case 39: 
          { return T_DIV;
          }
        case 140: break;
        case 17: 
          { return T_LPAREN;
          }
        case 141: break;
        case 64: 
          { return T_WHEN;
          }
        case 142: break;
        case 34: 
          { if (--blockCommentNestingLevel == 0) yybegin(YYINITIAL);
      return BLOCK_COMMENT;
          }
        case 143: break;
        case 19: 
          { return T_RBRACKET;
          }
        case 144: break;
        case 91: 
          { return T_WITHOUT;
          }
        case 145: break;
        case 22: 
          { return T_OR;
          }
        case 146: break;
        case 44: 
          { return T_SHL;
          }
        case 147: break;
        case 62: 
          { return T_FUNC;
          }
        case 148: break;
        case 31: 
          { return T_IS;
          }
        case 149: break;
        case 60: 
          { return T_PROC;
          }
        case 150: break;
        case 38: 
          { return T_ASM;
          }
        case 151: break;
        case 43: 
          { return T_SHR;
          }
        case 152: break;
        case 81: 
          { return T_STATIC;
          }
        case 153: break;
        case 40: 
          { return T_REF;
          }
        case 154: break;
        case 70: 
          { return T_MACRO;
          }
        case 155: break;
        case 7: 
          { return T_DOT;
          }
        case 156: break;
        case 54: 
          { return T_TYPE;
          }
        case 157: break;
        case 90: 
          { return T_GENERIC;
          }
        case 158: break;
        case 21: 
          { blockCommentNestingLevel = 1; yybegin(ST_BLOCK_COMMENT); return BLOCK_COMMENT;
          }
        case 159: break;
        case 32: 
          { return T_IF;
          }
        case 160: break;
        case 4: 
          { return LINE_COMMENT;
          }
        case 161: break;
        case 55: 
          { return T_CAST;
          }
        case 162: break;
        case 11: 
          { return T_LBRACKET;
          }
        case 163: break;
        case 57: 
          { return T_ENUM;
          }
        case 164: break;
        case 85: 
          { return T_EXPORT;
          }
        case 165: break;
        case 35: 
          { return T_OUT;
          }
        case 166: break;
        case 96: 
          { return T_INTERFACE;
          }
        case 167: break;
        case 33: 
          { blockCommentNestingLevel++; return BLOCK_COMMENT;
          }
        case 168: break;
        case 26: 
          { return ACCENT_QUOTED;
          }
        case 169: break;
        case 28: 
          { return T_AS;
          }
        case 170: break;
        case 77: 
          { return T_WHILE;
          }
        case 171: break;
        case 2: 
          { return WHITE_SPACE;
          }
        case 172: break;
        case 8: 
          { return OPERATOR;
          }
        case 173: break;
        case 61: 
          { return T_FROM;
          }
        case 174: break;
        case 74: 
          { return T_CONST;
          }
        case 175: break;
        case 52: 
          { return T_BIND;
          }
        case 176: break;
        case 86: 
          { return T_DISCARD;
          }
        case 177: break;
        case 80: 
          { return T_RETURN;
          }
        case 178: break;
        case 78: 
          { return T_OBJECT;
          }
        case 179: break;
        case 50: 
          { return T_VAR;
          }
        case 180: break;
        case 10: 
          { return T_COLON;
          }
        case 181: break;
        case 6: 
          { return CHARACTER_LITERAL;
          }
        case 182: break;
        case 87: 
          { return T_INCLUDE;
          }
        case 183: break;
        case 41: 
          { return T_NOT;
          }
        case 184: break;
        case 27: 
          { return T_BRACEDOT;
          }
        case 185: break;
        case 65: 
          { return T_BREAK;
          }
        case 186: break;
        case 53: 
          { return T_ADDR;
          }
        case 187: break;
        case 84: 
          { return T_EXCEPT;
          }
        case 188: break;
        case 76: 
          { return T_YIELD;
          }
        case 189: break;
        case 69: 
          { return T_NOTIN;
          }
        case 190: break;
        case 12: 
          { return T_EQ;
          }
        case 191: break;
        case 51: 
          { return T_FOR;
          }
        case 192: break;
        case 92: 
          { return T_DISTINCT;
          }
        case 193: break;
        case 58: 
          { return T_ELSE;
          }
        case 194: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
