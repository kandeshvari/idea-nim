/* The following code was generated by JFlex 1.4.3 on 10.03.16 14:15 */

package org.dmitrigb.ideanim;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.intellij.psi.TokenType.*;
import static org.dmitrigb.ideanim.psi.NimTypes.*;

/**
 * A lexer for lexing Nim source.
 */

public class NimLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ST_BLOCK_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\6\1\0\1\1\1\7\22\0\1\10\1\34\1\26"+
    "\1\5\3\34\1\24\1\41\1\42\1\32\1\23\1\40\1\23\1\21"+
    "\1\34\1\12\1\14\6\16\2\11\1\30\1\37\1\34\1\33\3\34"+
    "\4\20\1\22\1\20\24\2\1\31\1\25\1\43\1\34\1\3\1\27"+
    "\1\44\1\13\1\54\1\45\1\57\1\63\1\65\1\66\1\53\1\67"+
    "\1\56\1\55\1\51\1\47\1\15\1\60\1\2\1\46\1\50\1\52"+
    "\1\61\1\62\1\70\1\17\1\64\1\2\1\35\1\34\1\36\1\34"+
    "\53\0\1\2\12\0\1\2\4\0\1\2\5\0\27\2\1\0\37\2"+
    "\1\0\u01ca\2\4\0\14\2\16\0\5\2\7\0\1\2\1\0\1\2"+
    "\201\0\5\2\1\0\2\2\2\0\4\2\10\0\1\2\1\0\3\2"+
    "\1\0\1\2\1\0\24\2\1\0\123\2\1\0\213\2\10\0\236\2"+
    "\11\0\46\2\2\0\1\2\7\0\47\2\110\0\33\2\5\0\3\2"+
    "\55\0\53\2\25\0\12\4\4\0\2\2\1\0\143\2\1\0\1\2"+
    "\17\0\2\2\7\0\2\2\12\4\3\2\2\0\1\2\20\0\1\2"+
    "\1\0\36\2\35\0\131\2\13\0\1\2\16\0\12\4\41\2\11\0"+
    "\2\2\4\0\1\2\5\0\26\2\4\0\1\2\11\0\1\2\3\0"+
    "\1\2\27\0\31\2\107\0\1\2\1\0\13\2\127\0\66\2\3\0"+
    "\1\2\22\0\1\2\7\0\12\2\4\0\12\4\1\0\7\2\1\0"+
    "\7\2\5\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0"+
    "\1\2\3\0\4\2\3\0\1\2\20\0\1\2\15\0\2\2\1\0"+
    "\3\2\4\0\12\4\2\2\23\0\6\2\4\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\2\2\1\0\2\2\37\0\4\2"+
    "\1\0\1\2\7\0\12\4\2\0\3\2\20\0\11\2\1\0\3\2"+
    "\1\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2"+
    "\22\0\1\2\17\0\2\2\4\0\12\4\25\0\10\2\2\0\2\2"+
    "\2\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2"+
    "\36\0\2\2\1\0\3\2\4\0\12\4\1\0\1\2\21\0\1\2"+
    "\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2"+
    "\1\0\2\2\3\0\2\2\3\0\3\2\3\0\14\2\26\0\1\2"+
    "\25\0\12\4\25\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2"+
    "\1\0\5\2\3\0\1\2\32\0\2\2\6\0\2\2\4\0\12\4"+
    "\25\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2"+
    "\3\0\1\2\40\0\1\2\1\0\2\2\4\0\12\4\1\0\2\2"+
    "\22\0\10\2\1\0\3\2\1\0\51\2\2\0\1\2\20\0\1\2"+
    "\21\0\2\2\4\0\12\4\12\0\6\2\5\0\22\2\3\0\30\2"+
    "\1\0\11\2\1\0\1\2\2\0\7\2\72\0\60\2\1\0\2\2"+
    "\14\0\7\2\11\0\12\4\47\0\2\2\1\0\1\2\2\0\2\2"+
    "\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2"+
    "\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\0\2\2"+
    "\11\0\1\2\2\0\5\2\1\0\1\2\11\0\12\4\2\0\4\2"+
    "\40\0\1\2\37\0\12\4\26\0\10\2\1\0\44\2\33\0\5\2"+
    "\163\0\53\2\24\0\1\2\12\4\6\0\6\2\4\0\4\2\3\0"+
    "\1\2\3\0\2\2\7\0\3\2\4\0\15\2\14\0\1\2\1\0"+
    "\12\4\6\0\46\2\1\0\1\2\5\0\1\2\2\0\53\2\1\0"+
    "\u014d\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0"+
    "\51\2\1\0\4\2\2\0\41\2\1\0\4\2\2\0\7\2\1\0"+
    "\1\2\1\0\4\2\2\0\17\2\1\0\71\2\1\0\4\2\2\0"+
    "\103\2\45\0\20\2\20\0\125\2\14\0\u026c\2\2\0\21\2\1\0"+
    "\32\2\5\0\113\2\25\0\15\2\1\0\4\2\16\0\22\2\16\0"+
    "\22\2\16\0\15\2\1\0\3\2\17\0\64\2\43\0\1\2\4\0"+
    "\1\2\3\0\12\4\46\0\12\4\6\0\130\2\10\0\51\2\1\0"+
    "\1\2\5\0\106\2\12\0\35\2\51\0\12\4\36\2\2\0\5\2"+
    "\13\0\54\2\25\0\7\2\10\0\12\4\46\0\27\2\11\0\65\2"+
    "\53\0\12\4\6\0\12\4\15\0\1\2\135\0\57\2\21\0\7\2"+
    "\4\0\12\4\51\0\36\2\15\0\2\2\12\4\54\2\32\0\44\2"+
    "\34\0\12\4\3\0\3\2\12\4\44\2\153\0\4\2\1\0\4\2"+
    "\3\0\2\2\11\0\300\2\100\0\u0116\2\2\0\6\2\2\0\46\2"+
    "\2\0\6\2\2\0\10\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\37\2\2\0\65\2\1\0\7\2\1\0\1\2\3\0\3\2"+
    "\1\0\7\2\3\0\4\2\2\0\6\2\4\0\15\2\5\0\3\2"+
    "\1\0\7\2\26\0\1\2\135\0\1\2\15\0\1\2\20\0\15\2"+
    "\145\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2"+
    "\6\0\1\2\1\0\1\2\1\0\1\2\1\0\4\2\1\0\13\2"+
    "\2\0\4\2\5\0\5\2\4\0\1\2\64\0\2\2\u0a7b\0\57\2"+
    "\1\0\57\2\1\0\205\2\6\0\4\2\3\0\2\2\14\0\46\2"+
    "\1\0\1\2\5\0\1\2\2\0\70\2\7\0\1\2\20\0\27\2"+
    "\11\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2"+
    "\1\0\7\2\1\0\7\2\1\0\7\2\120\0\1\2\u01d5\0\2\2"+
    "\52\0\5\2\5\0\2\2\4\0\126\2\6\0\3\2\1\0\132\2"+
    "\1\0\4\2\5\0\51\2\3\0\136\2\21\0\33\2\65\0\20\2"+
    "\u0200\0\u19b6\2\112\0\u51cd\2\63\0\u048d\2\103\0\56\2\2\0\u010d\2"+
    "\3\0\20\2\12\4\2\2\24\0\57\2\20\0\31\2\10\0\106\2"+
    "\61\0\11\2\2\0\147\2\2\0\4\2\1\0\4\2\14\0\13\2"+
    "\115\0\12\2\1\0\3\2\1\0\4\2\1\0\27\2\35\0\64\2"+
    "\16\0\62\2\34\0\12\4\30\0\6\2\3\0\1\2\4\0\12\4"+
    "\34\2\12\0\27\2\31\0\35\2\7\0\57\2\34\0\1\2\12\4"+
    "\46\0\51\2\27\0\3\2\1\0\10\2\4\0\12\4\6\0\27\2"+
    "\3\0\1\2\5\0\60\2\1\0\1\2\3\0\2\2\2\0\5\2"+
    "\2\0\1\2\1\0\1\2\30\0\3\2\2\0\13\2\7\0\3\2"+
    "\14\0\6\2\2\0\6\2\2\0\6\2\11\0\7\2\1\0\7\2"+
    "\221\0\43\2\15\0\12\4\6\0\u2ba4\2\14\0\27\2\4\0\61\2"+
    "\u2104\0\u016e\2\2\0\152\2\46\0\7\2\14\0\5\2\5\0\1\2"+
    "\1\0\12\2\1\0\15\2\1\0\5\2\1\0\1\2\1\0\2\2"+
    "\1\0\2\2\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2"+
    "\50\0\14\2\164\0\5\2\1\0\207\2\23\0\12\4\7\0\32\2"+
    "\6\0\32\2\13\0\131\2\3\0\6\2\2\0\6\2\2\0\6\2"+
    "\2\0\3\2\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\2\5\3\3\1\6"+
    "\1\7\1\10\1\11\1\1\1\12\1\13\1\7\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\22\3"+
    "\3\24\1\0\1\4\2\0\1\25\5\0\4\3\1\26"+
    "\1\3\1\27\1\3\1\30\1\31\1\10\2\0\1\11"+
    "\1\0\1\32\1\0\1\33\2\3\1\34\1\3\1\35"+
    "\20\3\1\36\1\37\2\3\1\40\22\3\1\41\1\42"+
    "\2\5\1\0\3\5\4\3\1\43\1\44\1\7\1\3"+
    "\1\45\1\46\2\3\1\47\3\3\1\50\1\51\1\52"+
    "\1\3\1\53\1\54\1\55\3\3\1\56\12\3\1\57"+
    "\2\3\1\60\4\3\1\61\1\3\1\62\1\63\11\3"+
    "\1\64\2\3\1\65\15\3\1\66\11\3\1\67\1\70"+
    "\2\3\1\71\1\72\1\73\1\74\1\3\1\75\1\3"+
    "\1\76\2\3\1\77\1\3\1\100\1\101\1\102\4\3"+
    "\1\103\1\104\1\3\1\105\1\3\1\106\1\107\2\3"+
    "\1\110\2\3\1\111\2\3\1\112\5\3\1\113\1\3"+
    "\1\114\2\3\1\115\1\116\1\117\2\3\1\120\1\121"+
    "\1\122\3\3\1\123\4\3\1\124\1\125\4\3\1\126"+
    "\2\3\1\127\2\3\1\130\1\3\1\131\1\132\1\133"+
    "\1\134\1\135\1\3\1\136\1\137\1\3\1\140\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[303];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u02ac\0\162\0\u0390\0\u02ac\0\u03c9\0\162\0\162\0\162"+
    "\0\162\0\162\0\162\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae"+
    "\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\162\0\u0804\0\u083d"+
    "\0\u0876\0\u08af\0\u08e8\0\u0921\0\u08af\0\u095a\0\u0993\0\u09cc"+
    "\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\344\0\u0b5b"+
    "\0\344\0\u0b94\0\u0bcd\0\162\0\162\0\u0c06\0\u0c3f\0\162"+
    "\0\u0357\0\162\0\u0bcd\0\162\0\u0c78\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\344\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2"+
    "\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a"+
    "\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\344\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1"+
    "\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599"+
    "\0\162\0\162\0\u15d2\0\u160b\0\u160b\0\u09cc\0\u0a05\0\u0a3e"+
    "\0\u1644\0\u167d\0\u16b6\0\u16ef\0\344\0\344\0\u0bcd\0\u1728"+
    "\0\344\0\344\0\u1761\0\u179a\0\344\0\u17d3\0\u180c\0\u1845"+
    "\0\344\0\u187e\0\344\0\u18b7\0\344\0\344\0\344\0\u18f0"+
    "\0\u1929\0\u1962\0\344\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f"+
    "\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\344\0\u1bd5\0\u1c0e"+
    "\0\344\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\344\0\u1d2b\0\344"+
    "\0\344\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba"+
    "\0\u1ef3\0\u1f2c\0\344\0\u1f65\0\u1f9e\0\344\0\u1fd7\0\u2010"+
    "\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8"+
    "\0\u2211\0\u224a\0\u2283\0\344\0\u22bc\0\u22f5\0\u232e\0\u2367"+
    "\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484\0\344\0\344\0\u24bd"+
    "\0\u24f6\0\344\0\344\0\344\0\344\0\u252f\0\344\0\u2568"+
    "\0\344\0\u25a1\0\u25da\0\u2613\0\u264c\0\344\0\344\0\344"+
    "\0\u2685\0\u26be\0\u26f7\0\u2730\0\344\0\344\0\u2769\0\344"+
    "\0\u27a2\0\344\0\344\0\u27db\0\u2814\0\344\0\u284d\0\u2886"+
    "\0\344\0\u28bf\0\u28f8\0\344\0\u2931\0\u296a\0\u29a3\0\u29dc"+
    "\0\u2a15\0\344\0\u2a4e\0\344\0\u2a87\0\u2ac0\0\344\0\344"+
    "\0\344\0\u2af9\0\u2b32\0\344\0\344\0\344\0\u2b6b\0\u2ba4"+
    "\0\u2bdd\0\344\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\344\0\344"+
    "\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\344\0\u2dde\0\u2e17\0\344"+
    "\0\u2e50\0\u2e89\0\344\0\u2ec2\0\344\0\344\0\344\0\344"+
    "\0\344\0\u2efb\0\344\0\344\0\u2f34\0\344\0\344";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[303];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\2\3\1\6\3\4\1\7\1\10"+
    "\1\11\1\7\1\12\1\7\1\13\1\5\1\14\1\5"+
    "\1\15\1\16\1\15\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\15\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\5\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\2\5\1\55\5\56\1\57\35\56"+
    "\1\60\25\56\72\0\1\4\4\0\3\4\62\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\25\5"+
    "\6\62\1\63\1\64\21\62\1\65\37\62\3\0\1\7"+
    "\5\0\2\7\1\0\1\7\1\0\1\7\2\0\1\66"+
    "\1\67\34\0\1\67\14\0\1\7\5\0\2\7\1\70"+
    "\1\7\1\71\1\7\1\72\1\0\1\66\1\67\34\0"+
    "\1\67\13\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\2\5\1\73\4\5\1\74\1\5\1\75"+
    "\13\5\2\0\1\5\1\61\1\5\4\0\2\5\1\76"+
    "\5\5\1\0\1\5\21\0\2\5\1\77\12\5\1\100"+
    "\1\5\1\101\5\5\2\0\1\5\1\61\1\5\4\0"+
    "\4\5\1\102\3\5\1\0\1\5\21\0\25\5\21\0"+
    "\1\103\1\0\1\103\1\0\1\103\2\0\1\103\1\0"+
    "\3\103\1\0\1\104\53\0\1\103\1\0\1\103\1\0"+
    "\1\103\2\0\1\103\1\0\3\103\34\0\6\16\2\0"+
    "\14\16\1\105\1\106\43\16\6\17\2\0\15\17\1\107"+
    "\1\110\42\17\6\111\2\0\17\111\1\112\41\111\21\0"+
    "\1\103\1\0\1\103\1\0\1\103\2\0\1\113\1\0"+
    "\3\103\55\0\1\114\51\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\1\5\1\115\1\5\1\116"+
    "\1\117\1\5\1\120\16\5\2\0\1\5\1\61\1\5"+
    "\4\0\4\5\1\121\3\5\1\0\1\5\21\0\7\5"+
    "\1\122\3\5\1\123\11\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\1\5\21\0\1\124\12\5\1\125"+
    "\11\5\2\0\1\5\1\61\1\5\4\0\4\5\1\126"+
    "\3\5\1\0\1\5\21\0\7\5\1\127\15\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\1\5\21\0"+
    "\6\5\1\130\13\5\1\131\2\5\2\0\1\5\1\61"+
    "\1\5\4\0\4\5\1\132\3\5\1\0\1\5\21\0"+
    "\1\133\6\5\1\134\3\5\1\135\11\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\2\5"+
    "\1\136\10\5\1\137\1\5\1\140\2\5\1\141\4\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\1\5"+
    "\21\0\3\5\1\142\1\143\1\144\1\145\10\5\1\146"+
    "\5\5\2\0\1\5\1\61\1\5\4\0\4\5\1\147"+
    "\3\5\1\0\1\5\21\0\1\150\24\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\13\5"+
    "\1\151\11\5\2\0\1\5\1\61\1\5\4\0\6\5"+
    "\1\152\1\5\1\0\1\5\21\0\3\5\1\153\5\5"+
    "\1\154\13\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\2\5\1\155\3\5\1\156\16\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\1\5"+
    "\21\0\4\5\1\157\20\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\1\5\21\0\1\160\24\5\2\0"+
    "\1\5\1\61\1\5\4\0\4\5\1\161\3\5\1\0"+
    "\1\5\21\0\2\5\1\162\4\5\1\163\5\5\1\164"+
    "\7\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\7\5\1\165\15\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\13\5\1\166"+
    "\11\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\7\5\1\167\12\5\1\170\2\5\31\0"+
    "\1\171\44\0\1\172\65\0\1\5\1\0\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\25\5\6\62\1\63\1\64"+
    "\61\62\5\0\1\62\2\0\1\63\66\0\1\63\65\0"+
    "\1\173\5\0\2\173\1\0\1\173\1\0\1\173\55\0"+
    "\1\174\5\0\2\174\1\0\1\174\1\0\1\174\4\0"+
    "\1\175\50\0\1\176\6\0\1\176\1\0\1\176\57\0"+
    "\1\177\6\0\1\177\1\0\1\177\1\0\1\177\55\0"+
    "\1\200\5\0\4\200\1\0\1\200\1\0\1\200\1\0"+
    "\1\200\21\0\2\200\6\0\1\200\2\0\1\200\3\0"+
    "\1\200\7\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\13\5\1\201\11\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\3\5\1\202"+
    "\21\5\2\0\1\5\1\61\1\5\4\0\4\5\1\203"+
    "\3\5\1\0\1\5\21\0\25\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\23\5\1\204"+
    "\1\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\6\5\1\205\16\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\2\5\1\206"+
    "\22\5\21\0\1\207\1\0\1\207\1\0\1\207\2\0"+
    "\1\207\1\0\3\207\34\0\6\16\1\0\62\16\6\17"+
    "\1\0\62\17\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\1\5\1\210\23\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\1\5"+
    "\1\211\23\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\5\5\1\212\17\5\2\0\1\5"+
    "\1\61\1\5\4\0\4\5\1\213\3\5\1\0\1\5"+
    "\21\0\25\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\4\5\1\214\11\5\1\215\6\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\1\5"+
    "\21\0\17\5\1\216\5\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\1\5\21\0\7\5\1\217\15\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\1\5"+
    "\21\0\6\5\1\220\10\5\1\221\5\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\6\5"+
    "\1\222\16\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\11\5\1\223\13\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\1\224"+
    "\24\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\2\5\1\225\6\5\1\226\13\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\1\5\21\0"+
    "\1\5\1\227\23\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\10\5\1\230\14\5\2\0"+
    "\1\5\1\61\1\5\4\0\6\5\1\231\1\5\1\0"+
    "\1\5\21\0\25\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\6\5\1\232\16\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\1\5\21\0"+
    "\20\5\1\233\4\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\5\5\1\234\17\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\1\5\21\0"+
    "\14\5\1\235\10\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\14\5\1\236\10\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\1\5\21\0"+
    "\6\5\1\237\1\5\1\240\14\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\3\5\1\241"+
    "\21\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\14\5\1\242\10\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\13\5\1\243"+
    "\11\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\3\5\1\244\21\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\4\5\1\245"+
    "\20\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\6\5\1\246\16\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\10\5\1\247"+
    "\3\5\1\250\10\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\1\5\1\251\13\5\1\252"+
    "\7\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\4\5\1\253\2\5\1\254\15\5\2\0"+
    "\1\5\1\61\1\5\4\0\4\5\1\255\3\5\1\0"+
    "\1\5\21\0\25\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\2\5\1\256\22\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\1\5\21\0"+
    "\7\5\1\257\15\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\2\5\1\260\22\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\1\5\21\0"+
    "\2\5\1\261\22\5\2\0\1\5\1\61\1\5\4\0"+
    "\4\5\1\262\3\5\1\0\1\5\21\0\25\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\1\5\21\0"+
    "\3\5\1\263\21\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\3\5\1\264\21\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\1\5\21\0"+
    "\13\5\1\265\11\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\3\5\1\266\21\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\1\5\21\0"+
    "\6\5\1\267\16\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\7\5\1\270\3\5\1\271"+
    "\11\5\3\0\1\173\5\0\2\173\1\0\1\173\1\0"+
    "\1\173\3\0\1\67\34\0\1\67\14\0\1\174\5\0"+
    "\2\174\1\0\1\174\1\0\1\174\54\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\1\272\24\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\1\5"+
    "\21\0\1\5\1\273\23\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\1\5\21\0\10\5\1\274\14\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\1\5"+
    "\21\0\13\5\1\275\11\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\1\5\21\0\2\5\1\276\22\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\1\5"+
    "\21\0\5\5\1\277\17\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\1\5\21\0\6\5\1\300\1\5"+
    "\1\301\14\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\13\5\1\302\11\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\4\5"+
    "\1\303\20\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\15\5\1\304\7\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\7\5"+
    "\1\305\15\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\6\5\1\306\16\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\2\5"+
    "\1\307\22\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\7\5\1\310\15\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\22\5"+
    "\1\311\2\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\14\5\1\312\10\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\11\5"+
    "\1\313\13\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\13\5\1\314\11\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\13\5"+
    "\1\315\11\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\11\5\1\316\13\5\2\0\1\5"+
    "\1\61\1\5\4\0\4\5\1\317\3\5\1\0\1\5"+
    "\21\0\25\5\2\0\1\5\1\61\1\5\4\0\4\5"+
    "\1\320\3\5\1\0\1\5\21\0\25\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\2\5"+
    "\1\321\22\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\4\5\1\322\1\5\1\323\1\5"+
    "\1\324\5\5\1\325\6\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\1\5\21\0\6\5\1\326\4\5"+
    "\1\327\11\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\13\5\1\330\11\5\2\0\1\5"+
    "\1\61\1\5\4\0\4\5\1\331\3\5\1\0\1\5"+
    "\21\0\25\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\5\5\1\332\17\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\13\5"+
    "\1\333\11\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\17\5\1\334\5\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\10\5"+
    "\1\335\14\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\3\5\1\336\21\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\5\5"+
    "\1\337\17\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\1\340\24\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\10\5\1\341"+
    "\14\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\11\5\1\342\13\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\13\5\1\343"+
    "\11\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\22\5\1\344\2\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\11\5\1\345"+
    "\13\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\3\5\1\346\21\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\12\5\1\347"+
    "\12\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\12\5\1\350\12\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\10\5\1\351"+
    "\14\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\7\5\1\352\15\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\7\5\1\353"+
    "\15\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\1\354\24\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\1\5\21\0\2\5\1\355\22\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\1\5"+
    "\21\0\13\5\1\356\11\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\1\5\21\0\2\5\1\357\22\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\1\5"+
    "\21\0\3\5\1\360\21\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\1\5\21\0\7\5\1\361\15\5"+
    "\2\0\1\5\1\61\1\5\4\0\4\5\1\362\3\5"+
    "\1\0\1\5\21\0\25\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\1\5\21\0\3\5\1\363\21\5"+
    "\2\0\1\5\1\61\1\5\4\0\4\5\1\364\3\5"+
    "\1\0\1\5\21\0\25\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\1\5\21\0\11\5\1\365\13\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\1\5"+
    "\21\0\13\5\1\366\11\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\1\5\21\0\2\5\1\367\22\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\1\5"+
    "\21\0\15\5\1\370\7\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\1\5\21\0\6\5\1\371\16\5"+
    "\2\0\1\5\1\61\1\5\4\0\10\5\1\0\1\5"+
    "\21\0\2\5\1\372\22\5\2\0\1\5\1\61\1\5"+
    "\4\0\10\5\1\0\1\5\21\0\1\373\24\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\1\5\21\0"+
    "\6\5\1\374\16\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\7\5\1\375\15\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\1\5\21\0"+
    "\13\5\1\376\11\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\13\5\1\377\11\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\1\5\21\0"+
    "\14\5\1\u0100\10\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\2\5\1\u0101\22\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\1\5\21\0"+
    "\21\5\1\u0102\3\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\11\5\1\u0103\13\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\1\5\21\0"+
    "\1\5\1\u0104\23\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\2\5\1\u0105\22\5\2\0"+
    "\1\5\1\61\1\5\4\0\4\5\1\u0106\3\5\1\0"+
    "\1\5\21\0\25\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\13\5\1\u0107\11\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\1\5\21\0"+
    "\6\5\1\u0108\16\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\10\5\1\u0109\14\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\1\5\21\0"+
    "\3\5\1\u010a\21\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\2\5\1\u010b\22\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\1\5\21\0"+
    "\3\5\1\u010c\21\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\10\5\1\u010d\14\5\2\0"+
    "\1\5\1\61\1\5\4\0\10\5\1\0\1\5\21\0"+
    "\1\5\1\u010e\23\5\2\0\1\5\1\61\1\5\4\0"+
    "\10\5\1\0\1\5\21\0\1\u010f\24\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\17\5"+
    "\1\u0110\5\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\1\5\1\u0111\23\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\6\5"+
    "\1\u0112\16\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\6\5\1\u0113\16\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\3\5"+
    "\1\u0114\21\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\14\5\1\u0115\10\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\2\5"+
    "\1\u0116\22\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\6\5\1\u0117\16\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\6\5"+
    "\1\u0118\16\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\11\5\1\u0119\13\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\7\5"+
    "\1\u011a\15\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\15\5\1\u011b\7\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\10\5"+
    "\1\u011c\14\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\1\5\1\u011d\23\5\2\0\1\5"+
    "\1\61\1\5\4\0\10\5\1\0\1\5\21\0\6\5"+
    "\1\u011e\16\5\2\0\1\5\1\61\1\5\4\0\10\5"+
    "\1\0\1\5\21\0\1\u011f\24\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\13\5\1\u0120"+
    "\11\5\2\0\1\5\1\61\1\5\4\0\4\5\1\u0121"+
    "\3\5\1\0\1\5\21\0\25\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\15\5\1\u0122"+
    "\7\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\6\5\1\u0123\16\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\6\5\1\u0124"+
    "\16\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\20\5\1\u0125\4\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\10\5\1\u0126"+
    "\14\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\6\5\1\u0127\16\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\6\5\1\u0128"+
    "\16\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\13\5\1\u0129\11\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\10\5\1\u012a"+
    "\14\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\2\5\1\u012b\22\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\13\5\1\u012c"+
    "\11\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\13\5\1\u012d\11\5\2\0\1\5\1\61"+
    "\1\5\4\0\10\5\1\0\1\5\21\0\13\5\1\u012e"+
    "\11\5\2\0\1\5\1\61\1\5\4\0\10\5\1\0"+
    "\1\5\21\0\2\5\1\u012f\22\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12141];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\16\1\1\11\3\1\6\11\22\1\1\11"+
    "\2\1\1\0\1\1\2\0\1\1\5\0\11\1\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\54\1\2\11"+
    "\2\1\1\0\262\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[303];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  int blockCommentNestingLevel = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public NimLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1726) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 79: 
          { return T_ATOMIC;
          }
        case 98: break;
        case 75: 
          { return T_USING;
          }
        case 99: break;
        case 63: 
          { return T_WITH;
          }
        case 100: break;
        case 88: 
          { return T_CONCEPT;
          }
        case 101: break;
        case 3: 
          { return IDENT;
          }
        case 102: break;
        case 20: 
          { return BLOCK_COMMENT;
          }
        case 103: break;
        case 93: 
          { return T_TEMPLATE;
          }
        case 104: break;
        case 72: 
          { return T_TUPLE;
          }
        case 105: break;
        case 16: 
          { return T_COMMA;
          }
        case 106: break;
        case 95: 
          { return T_CONTINUE;
          }
        case 107: break;
        case 71: 
          { return T_MIXIN;
          }
        case 108: break;
        case 82: 
          { return T_METHOD;
          }
        case 109: break;
        case 49: 
          { return T_PTR;
          }
        case 110: break;
        case 56: 
          { return T_CASE;
          }
        case 111: break;
        case 68: 
          { return T_RAISE;
          }
        case 112: break;
        case 73: 
          { return T_ISNOT;
          }
        case 113: break;
        case 46: 
          { return T_TRY;
          }
        case 114: break;
        case 47: 
          { return T_LET;
          }
        case 115: break;
        case 14: 
          { return T_RBRACE;
          }
        case 116: break;
        case 13: 
          { return T_LBRACE;
          }
        case 117: break;
        case 37: 
          { return T_AND;
          }
        case 118: break;
        case 59: 
          { return T_ELIF;
          }
        case 119: break;
        case 97: 
          { return T_CONVERTER;
          }
        case 120: break;
        case 66: 
          { return T_BLOCK;
          }
        case 121: break;
        case 83: 
          { return T_IMPORT;
          }
        case 122: break;
        case 25: 
          { return T_DOTBRACE;
          }
        case 123: break;
        case 5: 
          { return NUMBER_LITERAL;
          }
        case 124: break;
        case 48: 
          { return T_END;
          }
        case 125: break;
        case 94: 
          { return T_ITERATOR;
          }
        case 126: break;
        case 15: 
          { return T_SEMICOLON;
          }
        case 127: break;
        case 29: 
          { return T_DO;
          }
        case 128: break;
        case 30: 
          { return T_IN;
          }
        case 129: break;
        case 42: 
          { return T_NIL;
          }
        case 130: break;
        case 89: 
          { return T_FINALLY;
          }
        case 131: break;
        case 67: 
          { return T_DEFER;
          }
        case 132: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 133: break;
        case 45: 
          { return T_MOD;
          }
        case 134: break;
        case 24: 
          { if (yytext().equals("::"))
      return T_DBLCOLON;
    if (yytext().equals(".."))
      return T_DOTDOT;
    return OPERATOR;
          }
        case 135: break;
        case 23: 
          { return T_OF;
          }
        case 136: break;
        case 36: 
          { return T_XOR;
          }
        case 137: break;
        case 9: 
          { return STRING_LITERAL;
          }
        case 138: break;
        case 18: 
          { return T_RPAREN;
          }
        case 139: break;
        case 39: 
          { return T_DIV;
          }
        case 140: break;
        case 17: 
          { return T_LPAREN;
          }
        case 141: break;
        case 64: 
          { return T_WHEN;
          }
        case 142: break;
        case 34: 
          { if (--blockCommentNestingLevel == 0) yybegin(YYINITIAL);
      return BLOCK_COMMENT;
          }
        case 143: break;
        case 19: 
          { return T_RBRACKET;
          }
        case 144: break;
        case 91: 
          { return T_WITHOUT;
          }
        case 145: break;
        case 22: 
          { return T_OR;
          }
        case 146: break;
        case 44: 
          { return T_SHL;
          }
        case 147: break;
        case 62: 
          { return T_FUNC;
          }
        case 148: break;
        case 31: 
          { return T_IS;
          }
        case 149: break;
        case 60: 
          { return T_PROC;
          }
        case 150: break;
        case 38: 
          { return T_ASM;
          }
        case 151: break;
        case 43: 
          { return T_SHR;
          }
        case 152: break;
        case 81: 
          { return T_STATIC;
          }
        case 153: break;
        case 40: 
          { return T_REF;
          }
        case 154: break;
        case 70: 
          { return T_MACRO;
          }
        case 155: break;
        case 6: 
          { return T_DOT;
          }
        case 156: break;
        case 54: 
          { return T_TYPE;
          }
        case 157: break;
        case 90: 
          { return T_GENERIC;
          }
        case 158: break;
        case 21: 
          { blockCommentNestingLevel = 1; yybegin(ST_BLOCK_COMMENT); return BLOCK_COMMENT;
          }
        case 159: break;
        case 32: 
          { return T_IF;
          }
        case 160: break;
        case 4: 
          { return LINE_COMMENT;
          }
        case 161: break;
        case 55: 
          { return T_CAST;
          }
        case 162: break;
        case 11: 
          { return T_LBRACKET;
          }
        case 163: break;
        case 57: 
          { return T_ENUM;
          }
        case 164: break;
        case 85: 
          { return T_EXPORT;
          }
        case 165: break;
        case 35: 
          { return T_OUT;
          }
        case 166: break;
        case 96: 
          { return T_INTERFACE;
          }
        case 167: break;
        case 33: 
          { blockCommentNestingLevel++; return BLOCK_COMMENT;
          }
        case 168: break;
        case 26: 
          { return ACCENT_QUOTED;
          }
        case 169: break;
        case 28: 
          { return T_AS;
          }
        case 170: break;
        case 77: 
          { return T_WHILE;
          }
        case 171: break;
        case 2: 
          { return WHITE_SPACE;
          }
        case 172: break;
        case 7: 
          { return OPERATOR;
          }
        case 173: break;
        case 61: 
          { return T_FROM;
          }
        case 174: break;
        case 74: 
          { return T_CONST;
          }
        case 175: break;
        case 52: 
          { return T_BIND;
          }
        case 176: break;
        case 86: 
          { return T_DISCARD;
          }
        case 177: break;
        case 80: 
          { return T_RETURN;
          }
        case 178: break;
        case 78: 
          { return T_OBJECT;
          }
        case 179: break;
        case 50: 
          { return T_VAR;
          }
        case 180: break;
        case 10: 
          { return T_COLON;
          }
        case 181: break;
        case 8: 
          { return CHARACTER_LITERAL;
          }
        case 182: break;
        case 87: 
          { return T_INCLUDE;
          }
        case 183: break;
        case 41: 
          { return T_NOT;
          }
        case 184: break;
        case 27: 
          { return T_BRACEDOT;
          }
        case 185: break;
        case 65: 
          { return T_BREAK;
          }
        case 186: break;
        case 53: 
          { return T_ADDR;
          }
        case 187: break;
        case 84: 
          { return T_EXCEPT;
          }
        case 188: break;
        case 76: 
          { return T_YIELD;
          }
        case 189: break;
        case 69: 
          { return T_NOTIN;
          }
        case 190: break;
        case 12: 
          { return T_EQ;
          }
        case 191: break;
        case 51: 
          { return T_FOR;
          }
        case 192: break;
        case 92: 
          { return T_DISTINCT;
          }
        case 193: break;
        case 58: 
          { return T_ELSE;
          }
        case 194: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
